/* The following code was generated by JFlex 1.4.3 on 5/12/17 11:49 PM */

package com.duy.pascal.backend.tokenizer;

import com.duy.pascal.backend.exceptions.grouping.EnumeratedGroupingException;
import com.duy.pascal.backend.exceptions.grouping.StrayCharacterException;
import com.duy.pascal.backend.linenumber.LineInfo;
import com.duy.pascal.backend.tokens.EOFToken;
import com.duy.pascal.backend.tokens.GroupingExceptionToken;
import com.duy.pascal.backend.tokens.OperatorToken;
import com.duy.pascal.backend.tokens.OperatorTypes;
import com.duy.pascal.backend.tokens.Token;
import com.duy.pascal.backend.tokens.WarningToken;
import com.duy.pascal.backend.tokens.WordToken;
import com.duy.pascal.backend.tokens.basic.ArrayToken;
import com.duy.pascal.backend.tokens.basic.AssignmentToken;
import com.duy.pascal.backend.tokens.basic.ColonToken;
import com.duy.pascal.backend.tokens.basic.CommaToken;
import com.duy.pascal.backend.tokens.basic.ConstToken;
import com.duy.pascal.backend.tokens.basic.DoToken;
import com.duy.pascal.backend.tokens.basic.DotDotToken;
import com.duy.pascal.backend.tokens.basic.DowntoToken;
import com.duy.pascal.backend.tokens.basic.ElseToken;
import com.duy.pascal.backend.tokens.basic.ForToken;
import com.duy.pascal.backend.tokens.basic.ForwardToken;
import com.duy.pascal.backend.tokens.basic.FunctionToken;
import com.duy.pascal.backend.tokens.basic.IfToken;
import com.duy.pascal.backend.tokens.basic.OfToken;
import com.duy.pascal.backend.tokens.basic.PeriodToken;
import com.duy.pascal.backend.tokens.basic.ProcedureToken;
import com.duy.pascal.backend.tokens.basic.ProgramToken;
import com.duy.pascal.backend.tokens.basic.RepeatToken;
import com.duy.pascal.backend.tokens.basic.SemicolonToken;
import com.duy.pascal.backend.tokens.basic.ThenToken;
import com.duy.pascal.backend.tokens.basic.ToToken;
import com.duy.pascal.backend.tokens.basic.TypeToken;
import com.duy.pascal.backend.tokens.basic.UntilToken;
import com.duy.pascal.backend.tokens.basic.VarToken;
import com.duy.pascal.backend.tokens.basic.WhileToken;
import com.duy.pascal.backend.tokens.closing.EndBracketToken;
import com.duy.pascal.backend.tokens.closing.EndParenToken;
import com.duy.pascal.backend.tokens.closing.EndToken;
import com.duy.pascal.backend.tokens.grouping.BeginEndToken;
import com.duy.pascal.backend.tokens.grouping.BracketedToken;
import com.duy.pascal.backend.tokens.grouping.CaseToken;
import com.duy.pascal.backend.tokens.grouping.ParenthesizedToken;
import com.duy.pascal.backend.tokens.grouping.RecordToken;
import com.duy.pascal.backend.tokens.value.BooleanToken;
import com.duy.pascal.backend.tokens.value.CharacterToken;
import com.duy.pascal.backend.tokens.value.DoubleToken;
import com.duy.pascal.backend.tokens.value.IntegerToken;
import com.duy.pascal.backend.tokens.value.StringToken;
import com.js.interpreter.core.ScriptSource;
import com.duy.pascal.backend.tokens.basic.UsesToken;
import com.duy.pascal.backend.tokens.basic.BreakToken;
import com.duy.pascal.backend.tokens.basic.ContinueToken;
import com.duy.pascal.backend.tokens.basic.WithToken;
import com.duy.pascal.backend.tokens.CommentToken;

import java.io.FileNotFoundException;
import java.io.Reader;
import java.util.List;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/12/17 11:49 PM from the specification file
 * <tt>C:/github/pascalnide/app/src/main/java/com/duy/pascal/backend/tokenizer/Lexer2.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRINGDONE = 4;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int STRINGPOUND = 6;
  public static final int INCLUDE_SNGL_QUOTE = 12;
  public static final int INCLUDE = 8;
  public static final int END_INCLUDE = 14;
  public static final int INCLUDE_DBL_QUOTE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\2\0\1\5\22\0\1\71\1\0\1\70\1\3"+
    "\1\15\1\17\1\22\1\67\1\24\1\27\1\25\1\51\1\62\1\11"+
    "\1\12\1\31\2\20\6\23\2\1\1\61\1\63\1\52\1\50\1\53"+
    "\1\0\1\54\1\40\1\21\1\34\1\37\1\10\1\16\1\60\1\45"+
    "\1\32\1\2\1\64\1\35\1\47\1\33\1\41\1\14\1\2\1\43"+
    "\1\44\1\42\1\36\1\46\1\56\1\13\1\57\1\2\1\65\1\0"+
    "\1\66\1\55\1\2\1\0\1\40\1\21\1\34\1\37\1\10\1\16"+
    "\1\60\1\45\1\32\1\2\1\64\1\35\1\47\1\33\1\41\1\14"+
    "\1\2\1\43\1\44\1\42\1\36\1\46\1\56\1\13\1\57\1\2"+
    "\1\26\1\7\1\30\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\0\1\2\1\3\1\4\1\2\1\5"+
    "\1\4\1\6\1\7\2\4\1\2\1\4\1\2\1\4"+
    "\1\2\1\10\1\11\1\2\1\12\1\13\14\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\4\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\1\1\30\1\31\4\32"+
    "\1\33\1\34\1\35\1\36\1\5\1\37\1\40\1\41"+
    "\1\1\1\42\2\36\2\43\1\44\1\0\1\45\1\46"+
    "\2\4\1\47\2\4\1\50\3\4\1\45\2\4\1\51"+
    "\5\0\1\52\1\53\6\4\1\54\2\4\1\55\1\56"+
    "\1\57\7\4\1\60\1\61\1\62\2\4\1\63\1\64"+
    "\1\0\1\65\1\64\3\0\1\66\1\4\1\67\3\4"+
    "\1\70\2\4\2\0\1\71\2\0\1\72\3\0\1\71"+
    "\1\73\4\4\1\74\1\4\1\75\6\4\1\76\1\77"+
    "\1\100\1\101\2\4\1\0\1\102\7\4\3\0\1\72"+
    "\3\0\1\103\2\0\1\104\3\4\1\105\2\4\1\106"+
    "\1\107\1\110\2\4\1\111\1\4\1\0\3\4\1\112"+
    "\1\4\1\113\1\114\1\0\1\103\2\0\1\4\1\115"+
    "\1\116\1\4\1\117\2\4\1\120\1\121\4\4\1\71"+
    "\2\0\1\4\1\122\1\123\1\124\1\4\1\125\1\4"+
    "\1\126\2\0\2\4\1\127\2\0\1\130\1\131\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u01d0\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u01d0\0\u0536\0\u01d0\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u01d0\0\u01d0\0\u0862\0\u089c\0\u01d0\0\u01d0\0\u08d6\0\u0910"+
    "\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u094a\0\u01d0\0\u0984"+
    "\0\u01d0\0\u09be\0\u09f8\0\u0570\0\u01d0\0\u01d0\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u01d0\0\u0a6c\0\u0a6c\0\u0ae0\0\u01d0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0b8e\0\u0c02\0\u01d0\0\u027e\0\u0c3c\0\u0c76"+
    "\0\u01d0\0\u0cb0\0\u0cea\0\u03da\0\u0d24\0\u0d5e\0\u0d98\0\u044e"+
    "\0\u0dd2\0\u0e0c\0\u04c2\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0244\0\u0244\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u0244\0\u0244\0\u0244\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u01d0\0\u01d0\0\u01d0"+
    "\0\u1308\0\u1342\0\u01d0\0\u01d0\0\u137c\0\u0ae0\0\u0ae0\0\u0b8e"+
    "\0\u0bc8\0\u13b6\0\u0244\0\u13f0\0\u0244\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u01d0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u0244\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u0244\0\u1878\0\u0244\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u0244\0\u0244\0\u0244\0\u0244\0\u1a0e"+
    "\0\u1a48\0\u1a82\0\u0244\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1c8c\0\u1d00\0\u166e"+
    "\0\u1d3a\0\u15fa\0\u1d74\0\u1dae\0\u0244\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\u0244\0\u1e96\0\u1ed0\0\u0244\0\u0244\0\u0244\0\u1f0a\0\u1f44"+
    "\0\u0244\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u0244\0\u20a0"+
    "\0\u0244\0\u0244\0\u20da\0\u1c8c\0\u2114\0\u214e\0\u2188\0\u0244"+
    "\0\u0244\0\u21c2\0\u0244\0\u21fc\0\u2236\0\u0244\0\u01d0\0\u2270"+
    "\0\u22aa\0\u22e4\0\u231e\0\u166e\0\u2358\0\u2392\0\u23cc\0\u0244"+
    "\0\u0244\0\u0244\0\u2406\0\u0244\0\u2440\0\u0244\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u0244\0\u2562\0\u259c\0\u0244\0\u0244\0\u25d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\3\15\1\11\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\12\1\26"+
    "\1\27\1\12\1\30\1\31\1\32\1\33\1\11\1\34"+
    "\1\35\1\36\1\37\1\13\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\13\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\2\13\1\60\1\61"+
    "\1\62\1\13\1\63\1\64\1\65\1\11\1\15\5\66"+
    "\2\67\60\66\1\70\2\66\4\71\3\15\15\71\1\72"+
    "\1\71\1\73\2\71\1\74\35\71\1\75\1\71\1\15"+
    "\1\76\1\77\16\76\1\77\2\76\1\77\46\76\4\100"+
    "\1\101\2\15\16\100\1\102\1\100\2\102\36\100\1\103"+
    "\1\104\1\15\5\105\2\106\61\105\1\107\6\105\2\67"+
    "\60\105\1\110\2\105\25\111\1\112\2\111\1\113\41\111"+
    "\73\0\1\12\10\0\1\114\5\0\1\12\1\115\1\0"+
    "\1\12\47\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\16\13\6\0"+
    "\3\13\3\0\1\13\6\0\1\116\16\0\1\116\2\0"+
    "\1\116\52\0\3\15\62\0\1\15\1\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\1\13\1\117\1\13\1\120\12\13\6\0"+
    "\3\13\3\0\1\13\17\0\1\121\60\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\7\13\1\122\6\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\11\13\1\123"+
    "\4\13\6\0\3\13\3\0\1\13\6\0\1\124\6\0"+
    "\1\124\5\0\1\124\1\0\2\124\1\0\1\124\10\0"+
    "\1\124\2\0\2\124\32\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\4\13\1\125\1\13\1\126\1\127\6\13\6\0\3\13"+
    "\3\0\1\13\25\0\1\130\52\0\2\13\5\0\1\131"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\11\13\1\132\4\13\6\0\3\13\3\0\1\13"+
    "\25\0\1\133\2\0\1\133\73\0\1\134\44\0\15\135"+
    "\1\136\7\135\1\0\44\135\25\0\1\137\3\0\1\140"+
    "\41\0\2\13\5\0\1\13\2\0\2\13\1\0\1\141"+
    "\1\0\2\13\1\0\1\13\6\0\1\13\1\142\14\13"+
    "\6\0\3\13\3\0\1\13\6\0\2\13\5\0\1\13"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\7\13\1\143\6\13\6\0\3\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\6\13\1\144\1\145"+
    "\6\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\1\13\1\146\10\13\1\147\3\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\150\6\13\1\151\6\13\6\0\3\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\1\13\1\152\7\13"+
    "\1\153\4\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\154\1\0\2\13"+
    "\1\0\1\13\6\0\11\13\1\155\4\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\7\13"+
    "\1\156\1\13\1\157\1\13\1\160\2\13\6\0\1\13"+
    "\1\161\1\13\3\0\1\13\6\0\2\13\5\0\1\162"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\16\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\13\13\1\163\2\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\6\13"+
    "\1\164\7\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\7\13\1\165\6\13\6\0\3\13"+
    "\3\0\1\13\55\0\1\166\2\0\1\167\66\0\1\170"+
    "\22\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\1\171\12\13\1\172"+
    "\2\13\6\0\3\13\3\0\1\13\55\0\1\173\21\0"+
    "\5\66\2\0\60\66\1\0\2\66\67\0\1\174\27\0"+
    "\1\175\44\0\25\135\1\0\44\135\1\0\1\77\16\0"+
    "\1\77\2\0\1\77\46\0\5\100\2\0\16\100\1\0"+
    "\1\100\2\0\40\100\1\0\4\100\1\101\2\15\16\100"+
    "\1\0\1\100\2\0\40\100\1\15\5\105\2\0\70\105"+
    "\2\0\61\105\1\176\6\105\2\0\60\105\1\177\2\105"+
    "\25\200\1\201\2\200\1\113\70\200\2\0\41\200\1\0"+
    "\1\202\16\0\1\202\2\0\1\202\47\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\5\13\1\203\10\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\12\13\1\204"+
    "\3\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\11\13\1\205\4\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\7\13\1\206"+
    "\6\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\1\13\1\207\14\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\3\13\1\210"+
    "\12\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\11\13\1\211\4\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\16\13\6\0"+
    "\2\13\1\212\3\0\1\13\6\0\2\13\5\0\1\213"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\16\13\6\0\3\13\3\0\1\13\5\0\15\214"+
    "\1\215\7\214\1\0\44\214\30\135\1\216\41\135\25\217"+
    "\1\220\2\217\1\221\1\217\1\222\37\217\25\223\1\224"+
    "\44\223\5\140\1\225\1\216\1\0\62\140\1\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\10\13\1\226\5\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\12\13"+
    "\1\227\3\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\1\13\1\230\14\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\10\13"+
    "\1\231\5\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\232\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\16\13\6\0\3\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\14\13\1\233\1\13"+
    "\6\0\3\13\3\0\1\13\6\0\2\13\5\0\1\13"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\16\13\6\0\1\234\2\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\5\13\1\235\10\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\11\13\1\236\4\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\4\13\1\237\11\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\240\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\16\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\1\13\1\241\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\16\13\6\0\3\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\1\13\1\242\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\2\13\1\243"+
    "\13\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\3\13\1\244\5\13\1\245\4\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\11\13\1\246\4\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\5\13\1\247\10\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\10\13\1\250\5\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\251\15\13\6\0\3\13"+
    "\3\0\1\13\5\0\25\214\1\0\44\214\1\0\1\202"+
    "\6\0\1\252\7\0\1\202\2\0\1\202\47\0\2\13"+
    "\5\0\1\253\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\16\13\6\0\3\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\2\13\1\254\13\13"+
    "\6\0\2\13\1\255\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\2\13\1\256\13\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\12\13\1\257"+
    "\3\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\16\13\6\0\1\260\2\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\1\261\15\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\6\13\1\262\7\13\6\0\3\13\3\0\1\13\5\0"+
    "\25\214\1\263\44\214\25\264\1\265\2\264\1\266\1\264"+
    "\1\267\37\264\25\217\1\220\2\217\1\221\70\217\1\135"+
    "\1\216\41\217\25\270\1\271\2\270\1\221\41\270\4\217"+
    "\1\272\20\217\1\220\2\217\1\221\2\217\1\273\35\217"+
    "\1\272\25\223\1\274\44\223\25\0\1\224\3\0\1\216"+
    "\46\0\1\216\64\0\2\13\5\0\1\275\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\16\13"+
    "\6\0\3\13\3\0\1\13\6\0\2\13\5\0\1\13"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\10\13\1\276\1\13\1\277\3\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\1\300"+
    "\15\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\12\13\1\301\3\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\302"+
    "\14\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\6\13\1\303\7\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\304\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\16\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\13\1\305\14\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\306\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\16\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\307\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\16\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\7\13\1\310\6\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\13\13\1\311\2\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\3\13\1\312\12\13\6\0\3\13\3\0\1\13\20\0"+
    "\1\313\57\0\2\13\5\0\1\314\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\16\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\11\13\1\315\4\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\10\13\1\316\5\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\317\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\16\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\6\13\1\320\7\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\321"+
    "\14\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\16\13\6\0\3\13\3\0\1\322\5\0"+
    "\25\214\1\263\1\214\1\216\42\214\25\264\1\265\2\264"+
    "\1\266\66\264\1\323\1\264\1\216\1\214\45\264\1\324"+
    "\20\264\1\265\2\264\1\266\2\264\1\325\35\264\1\324"+
    "\27\270\2\0\41\270\25\217\1\220\2\217\1\221\3\217"+
    "\1\326\35\217\25\223\1\274\3\223\1\216\40\223\1\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\327\15\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\10\13"+
    "\1\330\5\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\3\13\1\331\12\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\10\13"+
    "\1\332\5\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\16\13\6\0\1\13\1\333\1\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\6\13"+
    "\1\334\7\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\11\13\1\335\4\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\336\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\16\13"+
    "\6\0\3\13\3\0\1\13\21\0\1\337\56\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\5\13\1\340\10\13\6\0\3\13"+
    "\3\0\1\13\6\0\2\13\5\0\1\13\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\6\13"+
    "\1\341\7\13\6\0\3\13\3\0\1\13\6\0\2\13"+
    "\5\0\1\13\2\0\2\13\1\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\1\342\15\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\11\13\1\343"+
    "\4\13\6\0\3\13\3\0\1\13\5\0\25\264\1\265"+
    "\1\264\1\344\1\266\66\264\1\265\2\264\1\266\3\264"+
    "\1\345\35\264\25\217\1\220\2\217\1\221\4\217\1\346"+
    "\34\217\1\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\347"+
    "\14\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\7\13\1\350\6\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\10\13\1\351"+
    "\5\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\5\13\1\352\10\13\6\0\3\13\3\0"+
    "\1\13\6\0\2\13\5\0\1\13\2\0\2\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\4\13\1\353"+
    "\11\13\6\0\3\13\3\0\1\13\6\0\2\13\5\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\15\13\1\354\6\0\3\13\3\0\1\13"+
    "\6\0\2\13\5\0\1\13\2\0\2\13\1\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\7\13\1\355\6\13"+
    "\6\0\3\13\3\0\1\13\6\0\2\13\5\0\1\13"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\5\13\1\356\10\13\6\0\3\13\3\0\1\13"+
    "\5\0\25\264\1\265\2\264\1\266\4\264\1\357\34\264"+
    "\25\217\1\220\2\217\1\221\5\217\1\360\33\217\1\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\4\13\1\361\11\13\6\0"+
    "\3\13\3\0\1\13\6\0\2\13\5\0\1\13\2\0"+
    "\2\13\1\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\11\13\1\362\4\13\6\0\3\13\3\0\1\13\6\0"+
    "\2\13\5\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\13\1\363\14\13\6\0"+
    "\3\13\3\0\1\13\5\0\25\264\1\265\2\264\1\266"+
    "\5\264\1\364\33\264\25\217\1\220\2\217\1\221\6\217"+
    "\1\365\32\217\1\0\2\13\5\0\1\366\2\0\2\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\6\0\16\13"+
    "\6\0\3\13\3\0\1\13\6\0\2\13\5\0\1\367"+
    "\2\0\2\13\1\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\16\13\6\0\3\13\3\0\1\13\5\0\25\264"+
    "\1\265\2\264\1\266\6\264\1\370\32\264\10\217\1\272"+
    "\14\217\1\220\2\217\1\221\41\217\10\264\1\324\14\264"+
    "\1\265\2\264\1\266\41\264";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9744];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\1\11\5\1\1\11\11\1\1\11"+
    "\1\1\1\11\15\1\2\11\2\1\2\11\2\1\5\11"+
    "\1\1\1\11\1\1\1\11\3\1\2\11\3\1\1\11"+
    "\3\1\1\11\5\1\1\0\1\11\3\1\1\11\12\1"+
    "\5\0\25\1\3\11\2\1\2\11\1\0\2\1\3\0"+
    "\11\1\2\0\1\11\2\0\1\1\3\0\25\1\1\0"+
    "\10\1\3\0\1\1\3\0\1\1\2\0\16\1\1\0"+
    "\7\1\1\0\1\1\2\0\10\1\1\11\5\1\2\0"+
    "\10\1\2\0\3\1\2\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	List<ScriptSource> searchDirectories;
	Stack<String> sourcenames;
	
	StringBuilder literal=new StringBuilder();
    private Stack zzStreams = new Stack();
	private String tmpname;
	private Reader tmpreader;
		void addInclude(String name) throws FileNotFoundException {
    		for (ScriptSource s : searchDirectories) {
    			Reader r = s.read(name);
    			if (r != null) {
    				this.tmpreader=r;
    				this.tmpname=name;
    				return;
    			}
    		}
    		throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
    	}

	void commitInclude() {
		sourcenames.push(tmpname);
		yypushStream(tmpreader);
	}

    public final boolean yymoreStreams() {
        return !zzStreams.isEmpty();
    }

	public final void yypopStream() throws java.io.IOException {
            zzReader.close();
            ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
            zzBuffer = s.zzBuffer;
            zzReader = s.zzReader;
            zzEndRead = s.zzEndRead;
            zzStartRead = s.zzStartRead;
            zzCurrentPos = s.zzCurrentPos;
            zzMarkedPos = s.zzMarkedPos;
            zzAtEOF = s.zzAtEOF;
            zzEOFDone = s.zzEOFDone;
            yyline = s.yyline;
            yycolumn = s.yycolumn;
    }

    public final void yypushStream(Reader reader) {
            zzStreams.push(
                    new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                            zzMarkedPos, zzBuffer, zzAtEOF,
                            yyline, yycolumn)
            );
            zzAtEOF = false;
            zzBuffer = new char[ZZ_BUFFERSIZE];
            zzReader = reader;
            zzEndRead = zzStartRead = 0;
            zzCurrentPos = zzMarkedPos = 0;
            yyline = yycolumn = 0;
    }

	LineInfo getLine() {
		return new LineInfo(yyline,yycolumn,sourcenames.peek());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
  		sourcenames=new Stack<String>();
		sourcenames.push(sourcename);
		this.searchDirectories = searchDirectories;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in, String sourcename, List<ScriptSource> searchDirectories) {
    this(new java.io.InputStreamReader(in), sourcename, searchDirectories);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return new OperatorToken(getLine(),OperatorTypes.ADDRESS);
          }
        case 90: break;
        case 26: 
          { yypushback(1);
			yybegin(YYINITIAL); 
			if(literal.length()==1) {
				return new CharacterToken(getLine(),literal.toString().charAt(0));
				//return new CharacterToken(getLine(),literal.toString());
			} else {
				return new StringToken(getLine(),literal.toString());
			}
          }
        case 91: break;
        case 22: 
          { return new EndBracketToken(getLine());
          }
        case 92: break;
        case 10: 
          { return new EndParenToken(getLine());
          }
        case 93: break;
        case 35: 
          { return new GroupingExceptionToken(getLine(),
				EnumeratedGroupingException.GroupingExceptionTypes.MISMATCHED_BRACKETS);
          }
        case 94: break;
        case 33: 
          { literal.setLength(0); yybegin(INCLUDE_DBL_QUOTE);
          }
        case 95: break;
        case 72: 
          { return new TypeToken(getLine());
          }
        case 96: break;
        case 78: 
          { return new UntilToken(getLine());
          }
        case 97: break;
        case 2: 
          { return new GroupingExceptionToken(new StrayCharacterException(getLine(),yytext().charAt(0)));
          }
        case 98: break;
        case 42: 
          { return new IfToken(getLine());
          }
        case 99: break;
        case 61: 
          { return new OperatorToken(getLine(),OperatorTypes.AND);
          }
        case 100: break;
        case 74: 
          { return new BooleanToken(getLine(),false);
          }
        case 101: break;
        case 76: 
          { return new BreakToken(getLine());
          }
        case 102: break;
        case 89: 
          { return new ProcedureToken(getLine());
          }
        case 103: break;
        case 8: 
          { return new ParenthesizedToken(getLine());
          }
        case 104: break;
        case 23: 
          { literal.setLength(0);
		yybegin(STRING);
          }
        case 105: break;
        case 59: 
          { return new OperatorToken(getLine(),OperatorTypes.NOT);
          }
        case 106: break;
        case 82: 
          { return new DowntoToken(getLine());
          }
        case 107: break;
        case 28: 
          { return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.INCOMPLETE_CHAR);
          }
        case 108: break;
        case 63: 
          { return new OperatorToken(getLine(),OperatorTypes.SHIFTRIGHT);
          }
        case 109: break;
        case 30: 
          { try {
    		addInclude(yytext());
    	}catch( FileNotFoundException e) {
    		EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
			t.caused = e;
			return new GroupingExceptionToken(t);
    	}
    	yybegin(END_INCLUDE);
          }
        case 110: break;
        case 49: 
          { return new OperatorToken(getLine(),OperatorTypes.NOTEQUAL);
          }
        case 111: break;
        case 19: 
          { return new CommaToken(getLine());
          }
        case 112: break;
        case 24: 
          { return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.NEWLINE_IN_QUOTES);
          }
        case 113: break;
        case 20: 
          { return new SemicolonToken(getLine());
          }
        case 114: break;
        case 56: 
          { return new ForToken(getLine());
          }
        case 115: break;
        case 79: 
          { return new ArrayToken(getLine());
          }
        case 116: break;
        case 13: 
          { return new OperatorToken(getLine(),OperatorTypes.PLUS);
          }
        case 117: break;
        case 51: 
          { return new AssignmentToken(getLine());
          }
        case 118: break;
        case 25: 
          { yybegin(STRINGDONE);
          }
        case 119: break;
        case 14: 
          { return new OperatorToken(getLine(),OperatorTypes.LESSTHAN);
          }
        case 120: break;
        case 32: 
          { literal.setLength(0); yybegin(INCLUDE_SNGL_QUOTE);
          }
        case 121: break;
        case 55: 
          { return new OperatorToken(getLine(),OperatorTypes.XOR);
          }
        case 122: break;
        case 57: 
          { return new CommentToken(getLine(), yytext());
          }
        case 123: break;
        case 7: 
          { return new PeriodToken(getLine());
          }
        case 124: break;
        case 4: 
          { return new WordToken(getLine(),yytext());
          }
        case 125: break;
        case 15: 
          { return new OperatorToken(getLine(),OperatorTypes.GREATERTHAN);
          }
        case 126: break;
        case 54: 
          { return new EndToken(getLine());
          }
        case 127: break;
        case 48: 
          { return new OperatorToken(getLine(),OperatorTypes.LESSEQ);
          }
        case 128: break;
        case 88: 
          { return new ContinueToken(getLine());
          }
        case 129: break;
        case 70: 
          { return new BooleanToken(getLine(),true);
          }
        case 130: break;
        case 39: 
          { return new DotDotToken(getLine());
          }
        case 131: break;
        case 87: 
          { return new FunctionToken(getLine());
          }
        case 132: break;
        case 1: 
          { literal.append(yytext());
          }
        case 133: break;
        case 68: 
          { return new CaseToken(getLine());
          }
        case 134: break;
        case 71: 
          { return new ThenToken(getLine());
          }
        case 135: break;
        case 43: 
          { return new OperatorToken(getLine(),OperatorTypes.IN);
          }
        case 136: break;
        case 77: 
          { return new ConstToken(getLine());
          }
        case 137: break;
        case 46: 
          { return new OperatorToken(getLine(),OperatorTypes.OR);
          }
        case 138: break;
        case 67: 
          { yybegin(INCLUDE);
          }
        case 139: break;
        case 85: 
          { return new ProgramToken(getLine());
          }
        case 140: break;
        case 6: 
          { return new OperatorToken(getLine(),OperatorTypes.MINUS);
          }
        case 141: break;
        case 38: 
          { return new CharacterToken(getLine(),yytext());
          }
        case 142: break;
        case 9: 
          { return new OperatorToken(getLine(),OperatorTypes.MULTIPLY);
          }
        case 143: break;
        case 45: 
          { return new OfToken(getLine());
          }
        case 144: break;
        case 37: 
          { return new IntegerToken(getLine(),(int) Long.parseLong(yytext(), 2));
          }
        case 145: break;
        case 58: 
          { return new WarningToken(getLine(),"Warning! Unrecognized Compiler Directive!");
          }
        case 146: break;
        case 27: 
          { yybegin(STRING);
          }
        case 147: break;
        case 50: 
          { return new OperatorToken(getLine(),OperatorTypes.GREATEREQ);
          }
        case 148: break;
        case 64: 
          { return new VarToken(getLine());
          }
        case 149: break;
        case 21: 
          { return new BracketedToken(getLine());
          }
        case 150: break;
        case 11: 
          { return new OperatorToken(getLine(),OperatorTypes.DIVIDE);
          }
        case 151: break;
        case 47: 
          { return new ToToken(getLine());
          }
        case 152: break;
        case 40: 
          { return new IntegerToken(getLine(),(int) Long.parseLong(yytext(), 16));
          }
        case 153: break;
        case 86: 
          { return new ForwardToken(getLine());
          }
        case 154: break;
        case 75: 
          { return new BeginEndToken(getLine());
          }
        case 155: break;
        case 44: 
          { return new DoToken(getLine());
          }
        case 156: break;
        case 18: 
          { return new ColonToken(getLine());
          }
        case 157: break;
        case 41: 
          { return new IntegerToken(getLine(),(int) Long.parseLong(yytext(), 8));
          }
        case 158: break;
        case 53: 
          { literal.append('\"');
          }
        case 159: break;
        case 81: 
          { return new DoubleToken(getLine(),Double.parseDouble(yytext()));
          }
        case 160: break;
        case 73: 
          { return new WithToken(getLine());
          }
        case 161: break;
        case 66: 
          { return new ElseToken(getLine());
          }
        case 162: break;
        case 29: 
          { literal.append((char)Integer.parseInt(yytext())); yybegin(STRINGDONE);
          }
        case 163: break;
        case 69: 
          { return new UsesToken(getLine());
          }
        case 164: break;
        case 84: 
          { return new RecordToken(getLine());
          }
        case 165: break;
        case 80: 
          { return new WhileToken(getLine());
          }
        case 166: break;
        case 17: 
          { return new OperatorToken(getLine(),OperatorTypes.DEREF);
          }
        case 167: break;
        case 60: 
          { return new OperatorToken(getLine(),OperatorTypes.DIV);
          }
        case 168: break;
        case 3: 
          { return new IntegerToken(getLine(),(int) Long.parseLong(yytext()));
          }
        case 169: break;
        case 12: 
          { return new OperatorToken(getLine(),OperatorTypes.EQUALS);
          }
        case 170: break;
        case 62: 
          { return new OperatorToken(getLine(),OperatorTypes.SHIFTLEFT);
          }
        case 171: break;
        case 83: 
          { return new RepeatToken(getLine());
          }
        case 172: break;
        case 65: 
          { return new OperatorToken(getLine(),OperatorTypes.MOD);
          }
        case 173: break;
        case 34: 
          { return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
          }
        case 174: break;
        case 36: 
          { yybegin(YYINITIAL); commitInclude();
          }
        case 175: break;
        case 31: 
          { return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.MISSING_INCLUDE);
          }
        case 176: break;
        case 52: 
          { literal.append('\'');
          }
        case 177: break;
        case 5: 
          { 
          }
        case 178: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	if (!yymoreStreams()) {
		return new EOFToken(getLine());
	}
	sourcenames.pop();
	yypopStream();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
