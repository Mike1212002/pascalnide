/* The following code was generated by JFlex 1.4.3 on 4/21/17 6:42 PM */

package com.duy.pascal.backend.tokenizer;

import com.duy.pascal.backend.exceptions.grouping.EnumeratedGroupingException;
import com.duy.pascal.backend.exceptions.grouping.StrayCharacterException;
import com.duy.pascal.backend.linenumber.LineInfo;
import com.duy.pascal.backend.tokens.CommentToken;
import com.duy.pascal.backend.tokens.EOFToken;
import com.duy.pascal.backend.tokens.GroupingExceptionToken;
import com.duy.pascal.backend.tokens.OperatorToken;
import com.duy.pascal.backend.tokens.OperatorTypes;
import com.duy.pascal.backend.tokens.Token;
import com.duy.pascal.backend.tokens.WarningToken;
import com.duy.pascal.backend.tokens.WordToken;
import com.duy.pascal.backend.tokens.basic.ArrayToken;
import com.duy.pascal.backend.tokens.basic.AssignmentToken;
import com.duy.pascal.backend.tokens.basic.BreakToken;
import com.duy.pascal.backend.tokens.basic.ColonToken;
import com.duy.pascal.backend.tokens.basic.CommaToken;
import com.duy.pascal.backend.tokens.basic.ConstToken;
import com.duy.pascal.backend.tokens.basic.DoToken;
import com.duy.pascal.backend.tokens.basic.DotDotToken;
import com.duy.pascal.backend.tokens.basic.DowntoToken;
import com.duy.pascal.backend.tokens.basic.ElseToken;
import com.duy.pascal.backend.tokens.basic.ExitToken;
import com.duy.pascal.backend.tokens.basic.ForToken;
import com.duy.pascal.backend.tokens.basic.ForwardToken;
import com.duy.pascal.backend.tokens.basic.FunctionToken;
import com.duy.pascal.backend.tokens.basic.IfToken;
import com.duy.pascal.backend.tokens.basic.OfToken;
import com.duy.pascal.backend.tokens.basic.PeriodToken;
import com.duy.pascal.backend.tokens.basic.ProcedureToken;
import com.duy.pascal.backend.tokens.basic.ProgramToken;
import com.duy.pascal.backend.tokens.basic.RepeatToken;
import com.duy.pascal.backend.tokens.basic.SemicolonToken;
import com.duy.pascal.backend.tokens.basic.ThenToken;
import com.duy.pascal.backend.tokens.basic.ToToken;
import com.duy.pascal.backend.tokens.basic.TypeToken;
import com.duy.pascal.backend.tokens.basic.UntilToken;
import com.duy.pascal.backend.tokens.basic.UsesToken;
import com.duy.pascal.backend.tokens.basic.VarToken;
import com.duy.pascal.backend.tokens.basic.WhileToken;
import com.duy.pascal.backend.tokens.closing.EndBracketToken;
import com.duy.pascal.backend.tokens.closing.EndParenToken;
import com.duy.pascal.backend.tokens.closing.EndToken;
import com.duy.pascal.backend.tokens.grouping.BeginEndToken;
import com.duy.pascal.backend.tokens.grouping.BracketedToken;
import com.duy.pascal.backend.tokens.grouping.CaseToken;
import com.duy.pascal.backend.tokens.grouping.ParenthesizedToken;
import com.duy.pascal.backend.tokens.grouping.RecordToken;
import com.duy.pascal.backend.tokens.value.BooleanToken;
import com.duy.pascal.backend.tokens.value.CharacterToken;
import com.duy.pascal.backend.tokens.value.DoubleToken;
import com.duy.pascal.backend.tokens.value.IntegerToken;
import com.duy.pascal.backend.tokens.value.StringToken;
import com.js.interpreter.core.ScriptSource;

import java.io.FileNotFoundException;
import java.io.Reader;
import java.util.List;
import java.util.Stack;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/21/17 6:42 PM from the specification file
 * <tt>C:/Git/pascal_ide/app/src/main/java/com/duy/pascal/backend/tokenizer/Lexer2.flex</tt>
 */
public class Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int STRINGDONE = 4;
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    public static final int STRINGPOUND = 6;
    public static final int INCLUDE_SNGL_QUOTE = 12;
    public static final int INCLUDE = 8;
    public static final int END_INCLUDE = 14;
    public static final int INCLUDE_DBL_QUOTE = 10;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\5\1\7\2\0\1\6\22\0\1\74\1\0\1\73\1\3" +
                    "\1\17\2\0\1\61\1\11\1\14\1\12\1\41\1\53\1\42\1\4" +
                    "\1\16\12\2\1\52\1\54\1\43\1\40\1\44\2\0\1\27\1\55" +
                    "\1\22\1\25\1\26\1\45\1\51\1\35\1\20\1\1\1\56\1\23" +
                    "\1\37\1\21\1\30\1\50\1\1\1\32\1\34\1\31\1\24\1\72" +
                    "\1\46\1\33\1\47\1\1\1\57\1\0\1\60\1\0\1\1\1\0" +
                    "\1\66\1\55\1\22\1\25\1\65\1\45\1\51\1\35\1\20\1\1" +
                    "\1\56\1\63\1\37\1\62\1\30\1\50\1\1\1\70\1\71\1\67" +
                    "\1\64\1\36\1\46\1\33\1\47\1\1\1\13\1\10\1\15\uff82\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\6\0\1\2\1\3\1\4\1\2\1\5" +
                    "\1\6\1\7\1\10\1\2\1\11\1\12\16\3\1\13" +
                    "\1\14\1\15\1\16\1\17\3\3\1\20\1\21\1\22" +
                    "\1\3\1\23\1\24\1\25\1\1\1\26\1\27\1\30" +
                    "\1\31\3\30\1\32\1\33\1\34\1\35\1\6\1\36" +
                    "\1\37\1\40\1\1\1\41\2\42\2\43\1\44\1\0" +
                    "\1\45\1\46\5\0\1\47\6\3\1\50\5\3\1\51" +
                    "\1\52\1\53\10\3\1\54\1\55\1\56\5\3\1\57" +
                    "\2\3\1\60\1\0\1\61\1\60\2\0\1\62\2\0" +
                    "\1\63\2\0\1\64\3\0\1\63\1\65\4\3\1\66" +
                    "\1\3\1\67\2\3\1\70\6\3\1\71\1\72\1\73" +
                    "\1\74\1\75\2\3\1\76\4\3\3\0\1\64\3\0" +
                    "\1\77\2\0\1\100\2\3\1\101\1\3\1\102\1\103" +
                    "\1\3\1\104\1\105\1\106\12\3\1\0\1\77\2\0" +
                    "\1\107\1\110\1\3\1\111\3\3\1\112\1\3\1\113" +
                    "\2\3\1\114\1\115\1\63\2\0\1\116\1\117\1\120" +
                    "\4\3\2\0\1\3\1\121\1\3\1\122\2\0\1\123" +
                    "\1\3\1\0\1\124";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab" +
                    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u01e8" +
                    "\0\u0393\0\u01e8\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501" +
                    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9" +
                    "\0\u0726\0\u01e8\0\u01e8\0\u01e8\0\u0763\0\u07a0\0\u07dd\0\u081a" +
                    "\0\u0857\0\u0894\0\u01e8\0\u01e8\0\u08d1\0\u01e8\0\u01e8\0\u01e8" +
                    "\0\u090e\0\u01e8\0\u094b\0\u01e8\0\u01e8\0\u0988\0\u09c5\0\u03d0" +
                    "\0\u01e8\0\u01e8\0\u0a02\0\u0a3f\0\u0a7c\0\u01e8\0\u0a3f\0\u0a3f" +
                    "\0\u0ab9\0\u01e8\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0b70\0\u0bea" +
                    "\0\u029f\0\u01e8\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0225" +
                    "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03" +
                    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u0225\0\u0225\0\u0225\0\u1034" +
                    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u01e8" +
                    "\0\u01e8\0\u01e8\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u01e8" +
                    "\0\u134d\0\u138a\0\u01e8\0\u13c7\0\u0ab9\0\u0ab9\0\u0b70\0\u0bad" +
                    "\0\u0bea\0\u1404\0\u1441\0\u01e8\0\u147e\0\u14bb\0\u14f8\0\u1535" +
                    "\0\u1572\0\u15af\0\u15ec\0\u0225\0\u1629\0\u1666\0\u16a3\0\u16e0" +
                    "\0\u0225\0\u171d\0\u0225\0\u175a\0\u1797\0\u0225\0\u17d4\0\u1811" +
                    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u0225\0\u0225\0\u0225\0\u0225" +
                    "\0\u0225\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0" +
                    "\0\u1aed\0\u1b2a\0\u1b67\0\u1b2a\0\u1ba4\0\u14f8\0\u1be1\0\u147e" +
                    "\0\u1c1e\0\u1c5b\0\u0225\0\u1c98\0\u1cd5\0\u0225\0\u1d12\0\u0225" +
                    "\0\u0225\0\u1d4f\0\u0225\0\u0225\0\u0225\0\u1d8c\0\u1dc9\0\u1e06" +
                    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee" +
                    "\0\u1b2a\0\u202b\0\u2068\0\u0225\0\u0225\0\u20a5\0\u0225\0\u20e2" +
                    "\0\u211f\0\u215c\0\u0225\0\u2199\0\u0225\0\u21d6\0\u2213\0\u0225" +
                    "\0\u0225\0\u14f8\0\u2250\0\u228d\0\u0225\0\u0225\0\u0225\0\u22ca" +
                    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u0225\0\u2475" +
                    "\0\u0225\0\u24b2\0\u24ef\0\u0225\0\u252c\0\u2569\0\u0225";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\11\1\12\1\13\1\14\1\15\3\16\1\11\1\17" +
                    "\1\20\1\21\1\22\1\11\1\23\1\11\1\24\1\25" +
                    "\1\26\1\12\1\27\1\30\1\31\1\32\1\33\1\34" +
                    "\1\35\1\36\1\37\1\12\1\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\46\1\47\1\50\1\12\1\51\1\12" +
                    "\1\52\1\53\1\54\1\55\1\12\1\56\1\57\1\60" +
                    "\1\25\1\12\1\27\1\31\1\32\1\34\1\35\1\37" +
                    "\1\40\1\11\1\16\6\61\2\62\51\61\1\63\11\62" +
                    "\2\61\3\64\1\65\1\64\3\16\1\64\1\66\1\64" +
                    "\1\67\2\64\1\70\42\64\1\71\12\64\1\16\2\72" +
                    "\1\73\72\72\5\74\1\75\2\16\2\74\1\76\1\74" +
                    "\2\76\43\74\1\77\11\76\1\100\1\16\6\101\2\102" +
                    "\52\101\11\102\1\103\7\101\2\62\51\101\1\104\11\62" +
                    "\2\101\12\105\1\106\2\105\1\107\57\105\76\0\2\12" +
                    "\15\0\20\12\5\0\5\12\3\0\2\12\3\0\11\12" +
                    "\4\0\1\13\1\0\1\110\72\0\1\111\76\0\1\112" +
                    "\75\0\3\16\64\0\1\16\12\0\1\113\62\0\12\114" +
                    "\1\0\4\114\1\115\55\114\12\0\1\116\3\0\1\117" +
                    "\57\0\2\12\15\0\20\12\5\0\1\120\4\12\3\0" +
                    "\2\12\3\0\11\12\3\0\2\12\15\0\10\12\1\121" +
                    "\7\12\5\0\5\12\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\7\12\1\122\1\123\7\12\5\0\5\12" +
                    "\3\0\2\12\3\0\4\12\1\122\4\12\3\0\2\12" +
                    "\15\0\1\12\1\124\12\12\1\125\3\12\5\0\5\12" +
                    "\3\0\2\12\3\0\1\124\6\12\1\125\1\12\3\0" +
                    "\2\12\15\0\1\126\7\12\1\127\7\12\5\0\5\12" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\1\12" +
                    "\1\130\1\12\1\131\7\12\1\132\4\12\5\0\5\12" +
                    "\3\0\2\12\3\0\1\130\1\131\7\12\3\0\2\12" +
                    "\15\0\1\12\1\133\10\12\1\134\5\12\5\0\5\12" +
                    "\3\0\2\12\3\0\1\133\5\12\1\134\2\12\3\0" +
                    "\2\12\15\0\12\12\1\135\5\12\5\0\1\136\4\12" +
                    "\3\0\2\12\3\0\6\12\1\135\2\12\3\0\2\12" +
                    "\15\0\10\12\1\137\1\12\1\140\2\12\1\141\2\12" +
                    "\5\0\2\12\1\142\2\12\3\0\2\12\3\0\6\12" +
                    "\1\140\2\12\3\0\2\12\15\0\6\12\1\143\11\12" +
                    "\5\0\5\12\3\0\2\12\3\0\3\12\1\143\5\12" +
                    "\3\0\2\12\15\0\10\12\1\144\7\12\5\0\5\12" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\15\12" +
                    "\1\145\2\12\5\0\5\12\3\0\2\12\3\0\11\12" +
                    "\3\0\2\12\15\0\7\12\1\146\10\12\5\0\5\12" +
                    "\3\0\2\12\3\0\4\12\1\146\4\12\3\0\2\12" +
                    "\15\0\10\12\1\147\7\12\5\0\5\12\3\0\2\12" +
                    "\3\0\11\12\42\0\1\150\3\0\1\151\70\0\1\152" +
                    "\35\0\2\12\15\0\4\12\1\153\2\12\1\154\1\155" +
                    "\7\12\5\0\5\12\3\0\2\12\3\0\2\12\1\153" +
                    "\1\12\1\154\4\12\3\0\2\12\15\0\15\12\1\156" +
                    "\2\12\5\0\5\12\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\12\12\1\157\5\12\5\0\5\12\3\0" +
                    "\2\12\3\0\6\12\1\157\2\12\42\0\1\160\35\0" +
                    "\2\12\15\0\6\12\1\161\3\12\1\162\5\12\5\0" +
                    "\5\12\3\0\2\12\3\0\3\12\1\161\2\12\1\162" +
                    "\2\12\2\0\6\61\2\0\51\61\12\0\2\61\61\0" +
                    "\1\163\25\0\1\164\62\0\12\114\1\0\62\114\2\0" +
                    "\1\73\72\0\6\74\2\0\2\74\1\0\1\74\2\0" +
                    "\44\74\11\0\1\74\1\0\5\74\1\75\2\16\2\74" +
                    "\1\0\1\74\2\0\44\74\11\0\1\74\1\16\6\101" +
                    "\2\0\52\101\11\0\10\101\2\0\52\101\11\0\1\165" +
                    "\7\101\2\0\51\101\1\166\11\0\2\101\12\167\1\170" +
                    "\2\167\1\107\73\167\2\0\57\167\2\0\1\171\72\0" +
                    "\12\172\1\0\4\172\1\173\55\172\15\114\1\174\57\114" +
                    "\12\175\1\176\2\175\1\177\2\175\1\200\54\175\12\201" +
                    "\1\202\62\201\6\117\1\203\1\174\1\0\64\117\1\0" +
                    "\2\12\15\0\11\12\1\204\6\12\5\0\5\12\3\0" +
                    "\2\12\3\0\5\12\1\204\3\12\3\0\2\12\15\0" +
                    "\14\12\1\205\3\12\5\0\5\12\3\0\2\12\3\0" +
                    "\7\12\1\205\1\12\3\0\2\12\15\0\1\12\1\206" +
                    "\16\12\5\0\5\12\3\0\2\12\3\0\1\206\10\12" +
                    "\3\0\2\12\15\0\11\12\1\207\6\12\5\0\5\12" +
                    "\3\0\2\12\3\0\5\12\1\207\3\12\3\0\2\12" +
                    "\15\0\6\12\1\210\11\12\5\0\5\12\3\0\2\12" +
                    "\3\0\3\12\1\210\5\12\3\0\2\12\15\0\16\12" +
                    "\1\211\1\12\5\0\5\12\3\0\2\12\3\0\10\12" +
                    "\1\211\3\0\2\12\15\0\20\12\5\0\1\12\1\212" +
                    "\3\12\3\0\2\12\3\0\11\12\3\0\2\12\15\0" +
                    "\5\12\1\213\12\12\5\0\5\12\3\0\2\12\3\0" +
                    "\11\12\3\0\2\12\15\0\14\12\1\214\3\12\5\0" +
                    "\5\12\3\0\2\12\3\0\7\12\1\214\1\12\3\0" +
                    "\2\12\15\0\1\215\17\12\5\0\5\12\3\0\2\12" +
                    "\3\0\11\12\3\0\2\12\15\0\5\12\1\216\12\12" +
                    "\5\0\5\12\3\0\2\12\3\0\11\12\3\0\2\12" +
                    "\15\0\12\12\1\217\5\12\5\0\5\12\3\0\2\12" +
                    "\3\0\6\12\1\217\2\12\3\0\2\12\15\0\4\12" +
                    "\1\220\13\12\5\0\5\12\3\0\2\12\3\0\2\12" +
                    "\1\220\6\12\3\0\2\12\15\0\6\12\1\221\11\12" +
                    "\5\0\5\12\3\0\2\12\3\0\3\12\1\221\5\12" +
                    "\3\0\2\12\15\0\20\12\5\0\3\12\1\222\1\12" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\2\12" +
                    "\1\223\15\12\5\0\3\12\1\224\1\12\3\0\2\12" +
                    "\3\0\11\12\3\0\2\12\15\0\12\12\1\225\5\12" +
                    "\5\0\5\12\3\0\2\12\3\0\6\12\1\225\2\12" +
                    "\3\0\2\12\15\0\3\12\1\226\6\12\1\227\5\12" +
                    "\5\0\5\12\3\0\2\12\3\0\1\12\1\226\4\12" +
                    "\1\227\2\12\3\0\2\12\15\0\12\12\1\230\5\12" +
                    "\5\0\5\12\3\0\2\12\3\0\6\12\1\230\2\12" +
                    "\3\0\2\12\15\0\5\12\1\231\12\12\5\0\5\12" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\1\12" +
                    "\1\232\16\12\5\0\5\12\3\0\2\12\3\0\1\232" +
                    "\10\12\3\0\2\12\15\0\3\12\1\233\14\12\5\0" +
                    "\5\12\3\0\2\12\3\0\1\12\1\233\7\12\3\0" +
                    "\2\12\15\0\12\12\1\234\5\12\5\0\5\12\3\0" +
                    "\2\12\3\0\6\12\1\234\2\12\3\0\2\12\15\0" +
                    "\1\235\17\12\5\0\5\12\3\0\2\12\3\0\11\12" +
                    "\3\0\2\12\15\0\10\12\1\236\7\12\5\0\5\12" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\20\12" +
                    "\5\0\4\12\1\237\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\6\12\1\240\11\12\5\0\5\12\3\0" +
                    "\2\12\3\0\3\12\1\240\5\12\2\0\12\172\1\0" +
                    "\74\172\1\241\62\172\12\242\1\243\2\242\1\244\2\242" +
                    "\1\245\54\242\12\175\1\176\2\175\1\177\73\175\1\114" +
                    "\1\174\57\175\12\246\1\247\2\246\1\177\57\246\5\175" +
                    "\1\250\4\175\1\176\2\175\1\177\3\175\1\251\40\175" +
                    "\1\251\11\175\1\250\12\201\1\252\62\201\12\0\1\202" +
                    "\3\0\1\174\65\0\1\174\66\0\2\12\15\0\6\12" +
                    "\1\253\11\12\5\0\5\12\3\0\2\12\3\0\3\12" +
                    "\1\253\5\12\3\0\2\12\15\0\14\12\1\254\3\12" +
                    "\5\0\5\12\3\0\2\12\3\0\7\12\1\254\1\12" +
                    "\3\0\2\12\15\0\1\255\17\12\5\0\5\12\3\0" +
                    "\2\12\3\0\11\12\3\0\2\12\15\0\14\12\1\256" +
                    "\3\12\5\0\5\12\3\0\2\12\3\0\7\12\1\256" +
                    "\1\12\3\0\2\12\15\0\1\12\1\257\16\12\5\0" +
                    "\5\12\3\0\2\12\3\0\1\257\10\12\3\0\2\12" +
                    "\15\0\6\12\1\260\11\12\5\0\5\12\3\0\2\12" +
                    "\3\0\3\12\1\260\5\12\3\0\2\12\15\0\11\12" +
                    "\1\261\6\12\5\0\5\12\3\0\2\12\3\0\5\12" +
                    "\1\261\3\12\3\0\2\12\15\0\7\12\1\262\10\12" +
                    "\5\0\5\12\3\0\2\12\3\0\4\12\1\262\4\12" +
                    "\3\0\2\12\15\0\6\12\1\263\11\12\5\0\5\12" +
                    "\3\0\2\12\3\0\3\12\1\263\5\12\3\0\2\12" +
                    "\15\0\1\12\1\264\16\12\5\0\5\12\3\0\2\12" +
                    "\3\0\1\264\10\12\3\0\2\12\15\0\6\12\1\265" +
                    "\11\12\5\0\5\12\3\0\2\12\3\0\3\12\1\265" +
                    "\5\12\3\0\2\12\15\0\10\12\1\266\7\12\5\0" +
                    "\5\12\3\0\2\12\3\0\11\12\3\0\2\12\15\0" +
                    "\6\12\1\267\11\12\5\0\5\12\3\0\2\12\3\0" +
                    "\3\12\1\267\5\12\3\0\2\12\15\0\2\12\1\270" +
                    "\15\12\5\0\5\12\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\14\12\1\271\3\12\5\0\5\12\3\0" +
                    "\2\12\3\0\7\12\1\271\1\12\3\0\2\12\15\0" +
                    "\20\12\5\0\1\12\1\272\3\12\3\0\2\12\3\0" +
                    "\11\12\3\0\2\12\15\0\3\12\1\273\14\12\5\0" +
                    "\5\12\3\0\2\12\3\0\1\12\1\273\7\12\3\0" +
                    "\2\12\15\0\2\12\1\274\15\12\5\0\4\12\1\275" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\1\276" +
                    "\17\12\5\0\5\12\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\7\12\1\277\10\12\5\0\5\12\3\0" +
                    "\2\12\3\0\4\12\1\277\4\12\2\0\12\172\1\241" +
                    "\1\172\1\174\60\172\12\242\1\243\2\242\1\244\71\242" +
                    "\1\300\1\242\1\174\1\172\64\242\1\301\4\242\1\243" +
                    "\2\242\1\244\3\242\1\302\40\242\1\302\11\242\1\301" +
                    "\14\246\2\0\57\246\12\175\1\176\2\175\1\177\4\175" +
                    "\1\303\52\175\12\201\1\252\3\201\1\174\56\201\1\0" +
                    "\2\12\15\0\11\12\1\304\6\12\5\0\5\12\3\0" +
                    "\2\12\3\0\5\12\1\304\3\12\3\0\2\12\15\0" +
                    "\3\12\1\305\14\12\5\0\5\12\3\0\2\12\3\0" +
                    "\1\12\1\305\7\12\3\0\2\12\15\0\11\12\1\306" +
                    "\6\12\5\0\5\12\3\0\2\12\3\0\5\12\1\306" +
                    "\3\12\3\0\2\12\15\0\20\12\5\0\2\12\1\307" +
                    "\2\12\3\0\2\12\3\0\11\12\3\0\2\12\15\0" +
                    "\12\12\1\310\5\12\5\0\5\12\3\0\2\12\3\0" +
                    "\6\12\1\310\2\12\3\0\2\12\15\0\7\12\1\311" +
                    "\10\12\5\0\5\12\3\0\2\12\3\0\4\12\1\311" +
                    "\4\12\3\0\2\12\15\0\11\12\1\312\6\12\5\0" +
                    "\5\12\3\0\2\12\3\0\5\12\1\312\3\12\3\0" +
                    "\2\12\15\0\6\12\1\313\11\12\5\0\5\12\3\0" +
                    "\2\12\3\0\3\12\1\313\5\12\3\0\2\12\15\0" +
                    "\7\12\1\314\10\12\5\0\5\12\3\0\2\12\3\0" +
                    "\4\12\1\314\4\12\3\0\2\12\15\0\6\12\1\315" +
                    "\11\12\5\0\5\12\3\0\2\12\3\0\3\12\1\315" +
                    "\5\12\3\0\2\12\15\0\6\12\1\316\11\12\5\0" +
                    "\5\12\3\0\2\12\3\0\3\12\1\316\5\12\3\0" +
                    "\2\12\15\0\12\12\1\317\5\12\5\0\5\12\3\0" +
                    "\2\12\3\0\6\12\1\317\2\12\3\0\2\12\15\0" +
                    "\1\12\1\320\16\12\5\0\5\12\3\0\2\12\3\0" +
                    "\1\320\10\12\3\0\2\12\15\0\20\12\5\0\5\12" +
                    "\3\0\1\12\1\321\3\0\11\12\2\0\12\242\1\243" +
                    "\1\242\1\322\1\244\71\242\1\243\2\242\1\244\4\242" +
                    "\1\323\52\242\12\175\1\176\2\175\1\177\5\175\1\324" +
                    "\37\175\1\324\11\175\1\0\2\12\15\0\10\12\1\325" +
                    "\7\12\5\0\5\12\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\5\12\1\326\12\12\5\0\5\12\3\0" +
                    "\2\12\3\0\11\12\3\0\2\12\15\0\11\12\1\327" +
                    "\6\12\5\0\5\12\3\0\2\12\3\0\5\12\1\327" +
                    "\3\12\3\0\2\12\15\0\1\330\17\12\5\0\5\12" +
                    "\3\0\2\12\3\0\11\12\3\0\2\12\15\0\12\12" +
                    "\1\331\5\12\5\0\5\12\3\0\2\12\3\0\6\12" +
                    "\1\331\2\12\3\0\2\12\15\0\5\12\1\332\12\12" +
                    "\5\0\5\12\3\0\2\12\3\0\11\12\3\0\2\12" +
                    "\15\0\7\12\1\333\10\12\5\0\5\12\3\0\2\12" +
                    "\3\0\4\12\1\333\4\12\2\0\12\242\1\243\2\242" +
                    "\1\244\5\242\1\334\37\242\1\334\11\242\12\175\1\176" +
                    "\2\175\1\177\6\175\1\335\37\175\1\335\10\175\1\0" +
                    "\2\12\15\0\10\12\1\336\7\12\5\0\5\12\3\0" +
                    "\2\12\3\0\11\12\3\0\2\12\15\0\5\12\1\337" +
                    "\12\12\5\0\5\12\3\0\2\12\3\0\11\12\3\0" +
                    "\2\12\15\0\4\12\1\340\13\12\5\0\5\12\3\0" +
                    "\2\12\3\0\2\12\1\340\6\12\3\0\2\12\15\0" +
                    "\17\12\1\341\5\0\5\12\3\0\2\12\3\0\11\12" +
                    "\2\0\12\242\1\243\2\242\1\244\6\242\1\342\37\242" +
                    "\1\342\10\242\12\175\1\176\2\175\1\177\7\175\1\343" +
                    "\47\175\1\0\2\12\15\0\1\12\1\344\16\12\5\0" +
                    "\5\12\3\0\2\12\3\0\1\344\10\12\3\0\2\12" +
                    "\15\0\12\12\1\345\5\12\5\0\5\12\3\0\2\12" +
                    "\3\0\6\12\1\345\2\12\2\0\12\242\1\243\2\242" +
                    "\1\244\7\242\1\346\47\242\12\175\1\176\2\175\1\177" +
                    "\10\175\1\250\36\175\1\250\7\175\1\0\2\12\15\0" +
                    "\6\12\1\347\11\12\5\0\5\12\3\0\2\12\3\0" +
                    "\3\12\1\347\5\12\2\0\12\242\1\243\2\242\1\244" +
                    "\10\242\1\301\36\242\1\301\7\242";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\1\6\0\1\11\6\1\1\11\1\1\1\11" +
                    "\17\1\3\11\6\1\2\11\1\1\3\11\1\1\1\11" +
                    "\1\1\2\11\3\1\2\11\3\1\1\11\3\1\1\11" +
                    "\5\1\1\0\1\1\1\11\5\0\30\1\3\11\5\1" +
                    "\1\11\2\1\1\11\1\0\2\1\2\0\1\1\2\0" +
                    "\1\11\2\0\1\1\3\0\36\1\3\0\1\1\3\0" +
                    "\1\1\2\0\25\1\1\0\1\1\2\0\17\1\2\0" +
                    "\7\1\2\0\4\1\2\0\2\1\1\0\1\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /* user code: */
    List<ScriptSource> searchDirectories;
    Stack<String> sourcenames;
    StringBuilder literal = new StringBuilder();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;
    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;
    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;
    private Stack zzStreams = new Stack();
    private String tmpname;
    private Reader tmpreader;

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
        sourcenames = new Stack<String>();
        sourcenames.push(sourcename);
        this.searchDirectories = searchDirectories;
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public Lexer(java.io.InputStream in, String sourcename, List<ScriptSource> searchDirectories) {
        this(new java.io.InputStreamReader(in), sourcename, searchDirectories);
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[9638];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 180) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    void addInclude(String name) throws FileNotFoundException {
        for (ScriptSource s : searchDirectories) {
            Reader returnsValue = s.read(name);
            if (returnsValue != null) {
                this.tmpreader = returnsValue;
                this.tmpname = name;
                return;
            }
        }
        throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
    }

    void commitInclude() {
        sourcenames.push(tmpname);
        yypushStream(tmpreader);
    }

    public final boolean yymoreStreams() {
        return !zzStreams.isEmpty();
    }

    public final void yypopStream() throws java.io.IOException {
        zzReader.close();
        ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
        zzBuffer = s.zzBuffer;
        zzReader = s.zzReader;
        zzEndRead = s.zzEndRead;
        zzStartRead = s.zzStartRead;
        zzCurrentPos = s.zzCurrentPos;
        zzMarkedPos = s.zzMarkedPos;
        zzAtEOF = s.zzAtEOF;
        zzEOFDone = s.zzEOFDone;
        yyline = s.yyline;
        yycolumn = s.yycolumn;
    }

    public final void yypushStream(Reader reader) {
        zzStreams.push(
                new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
        );
        zzAtEOF = false;
        zzBuffer = new char[ZZ_BUFFERSIZE];
        zzReader = reader;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yycolumn = 0;
    }

    LineInfo getLine() {
        return new LineInfo(yyline, yycolumn, sourcenames.peek());
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

    /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 25: {
                    yybegin(STRINGPOUND);
                }
                case 85:
                    break;
                case 21: {
                    literal.setLength(0);
                    yybegin(STRING);
                }
                case 86:
                    break;
                case 20: {
                    return new EndBracketToken(getLine());
                }
                case 87:
                    break;
                case 9: {
                    return new EndParenToken(getLine());
                }
                case 88:
                    break;
                case 32: {
                    literal.setLength(0);
                    yybegin(INCLUDE_DBL_QUOTE);
                }
                case 89:
                    break;
                case 70: {
                    return new TypeToken(getLine());
                }
                case 90:
                    break;
                case 72: {
                    return new UntilToken(getLine());
                }
                case 91:
                    break;
                case 2: {
                    return new GroupingExceptionToken(new StrayCharacterException(getLine(), yytext().charAt(0)));
                }
                case 92:
                    break;
                case 39: {
                    return new IfToken(getLine());
                }
                case 93:
                    break;
                case 56: {
                    return new OperatorToken(getLine(), OperatorTypes.AND);
                }
                case 94:
                    break;
                case 24: {
                    yypushback(1);
                    yybegin(YYINITIAL);
                    if (literal.length() == 1) {
                        return new CharacterToken(getLine(), literal.toString().charAt(0));
                    } else {
                        return new StringToken(getLine(), literal.toString());
                    }
                }
                case 95:
                    break;
                case 74: {
                    return new BooleanToken(getLine(), false);
                }
                case 96:
                    break;
                case 77: {
                    return new BreakToken(getLine());
                }
                case 97:
                    break;
                case 84: {
                    return new ProcedureToken(getLine());
                }
                case 98:
                    break;
                case 7: {
                    return new ParenthesizedToken(getLine());
                }
                case 99:
                    break;
                case 53: {
                    return new OperatorToken(getLine(), OperatorTypes.NOT);
                }
                case 100:
                    break;
                case 78: {
                    return new DowntoToken(getLine());
                }
                case 101:
                    break;
                case 59: {
                    return new OperatorToken(getLine(), OperatorTypes.SHIFTRIGHT);
                }
                case 102:
                    break;
                case 45: {
                    return new OperatorToken(getLine(), OperatorTypes.NOTEQUAL);
                }
                case 103:
                    break;
                case 17: {
                    return new CommaToken(getLine());
                }
                case 104:
                    break;
                case 34: {
                    try {
                        addInclude(yytext());
                    } catch (FileNotFoundException e) {
                        EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                        t.caused = e;
                        return new GroupingExceptionToken(t);
                    }
                    yybegin(END_INCLUDE);
                }
                case 105:
                    break;
                case 18: {
                    return new SemicolonToken(getLine());
                }
                case 106:
                    break;
                case 62: {
                    return new ForToken(getLine());
                }
                case 107:
                    break;
                case 73: {
                    return new ArrayToken(getLine());
                }
                case 108:
                    break;
                case 30: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.MISSING_INCLUDE);
                }
                case 109:
                    break;
                case 12: {
                    return new OperatorToken(getLine(), OperatorTypes.PLUS);
                }
                case 110:
                    break;
                case 47: {
                    return new AssignmentToken(getLine());
                }
                case 111:
                    break;
                case 23: {
                    yybegin(STRINGDONE);
                }
                case 112:
                    break;
                case 14: {
                    return new OperatorToken(getLine(), OperatorTypes.LESSTHAN);
                }
                case 113:
                    break;
                case 31: {
                    literal.setLength(0);
                    yybegin(INCLUDE_SNGL_QUOTE);
                }
                case 114:
                    break;
                case 57: {
                    return new OperatorToken(getLine(), OperatorTypes.XOR);
                }
                case 115:
                    break;
                case 51: {
                    return new CommentToken(getLine(), yytext());
                }
                case 116:
                    break;
                case 5: {
                    return new PeriodToken(getLine());
                }
                case 117:
                    break;
                case 15: {
                    return new OperatorToken(getLine(), OperatorTypes.GREATERTHAN);
                }
                case 118:
                    break;
                case 55: {
                    return new EndToken(getLine());
                }
                case 119:
                    break;
                case 44: {
                    return new OperatorToken(getLine(), OperatorTypes.LESSEQ);
                }
                case 120:
                    break;
                case 68: {
                    return new BooleanToken(getLine(), true);
                }
                case 121:
                    break;
                case 27: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.INCOMPLETE_CHAR);
                }
                case 122:
                    break;
                case 38: {
                    return new DotDotToken(getLine());
                }
                case 123:
                    break;
                case 83: {
                    return new FunctionToken(getLine());
                }
                case 124:
                    break;
                case 29: {
                    try {
                        addInclude(yytext());
                    } catch (FileNotFoundException e) {
                        EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                        t.caused = e;
                        return new GroupingExceptionToken(t);
                    }
                    yybegin(END_INCLUDE);
                }
                case 125:
                    break;
                case 22: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.NEWLINE_IN_QUOTES);
                }
                case 126:
                    break;
                case 1: {
                    literal.append(yytext());
                }
                case 127:
                    break;
                case 64: {
                    return new CaseToken(getLine());
                }
                case 128:
                    break;
                case 69: {
                    return new ThenToken(getLine());
                }
                case 129:
                    break;
                case 71: {
                    return new ConstToken(getLine());
                }
                case 130:
                    break;
                case 41: {
                    return new OperatorToken(getLine(), OperatorTypes.OR);
                }
                case 131:
                    break;
                case 63: {
                    yybegin(INCLUDE);
                }
                case 132:
                    break;
                case 82: {
                    return new ProgramToken(getLine());
                }
                case 133:
                    break;
                case 13: {
                    return new OperatorToken(getLine(), OperatorTypes.MINUS);
                }
                case 134:
                    break;
                case 33: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                }
                case 135:
                    break;
                case 3: {
                    return new WordToken(getLine(), yytext().toLowerCase());
                }
                case 136:
                    break;
                case 37: {
                    return new CharacterToken(getLine(), yytext());
                }
                case 137:
                    break;
                case 8: {
                    return new OperatorToken(getLine(), OperatorTypes.MULTIPLY);
                }
                case 138:
                    break;
                case 42: {
                    return new OfToken(getLine());
                }
                case 139:
                    break;
                case 35: {
                    return new GroupingExceptionToken(getLine(),
                            EnumeratedGroupingException.GroupingExceptionTypes.MISMATCHED_BRACKETS);
                }
                case 140:
                    break;
                case 67: {
                    return new ExitToken(getLine());
                }
                case 141:
                    break;
                case 52: {
                    return new WarningToken(getLine(), "Warning! Unrecognized Compiler Directive!");
                }
                case 142:
                    break;
                case 26: {
                    yybegin(STRING);
                }
                case 143:
                    break;
                case 46: {
                    return new OperatorToken(getLine(), OperatorTypes.GREATEREQ);
                }
                case 144:
                    break;
                case 60: {
                    return new VarToken(getLine());
                }
                case 145:
                    break;
                case 19: {
                    return new BracketedToken(getLine());
                }
                case 146:
                    break;
                case 10: {
                    return new OperatorToken(getLine(), OperatorTypes.DIVIDE);
                }
                case 147:
                    break;
                case 43: {
                    return new ToToken(getLine());
                }
                case 148:
                    break;
                case 81: {
                    return new ForwardToken(getLine());
                }
                case 149:
                    break;
                case 76: {
                    return new BeginEndToken(getLine());
                }
                case 150:
                    break;
                case 40: {
                    return new DoToken(getLine());
                }
                case 151:
                    break;
                case 16: {
                    return new ColonToken(getLine());
                }
                case 152:
                    break;
                case 49: {
                    literal.append('\"');
                }
                case 153:
                    break;
                case 50: {
                    return new DoubleToken(getLine(), Double.parseDouble(yytext()));
                }
                case 154:
                    break;
                case 66: {
                    return new ElseToken(getLine());
                }
                case 155:
                    break;
                case 28: {
                    literal.append((char) Integer.parseInt(yytext()));
                    yybegin(STRINGDONE);
                }
                case 156:
                    break;
                case 65: {
                    return new UsesToken(getLine());
                }
                case 157:
                    break;
                case 79: {
                    return new RecordToken(getLine());
                }
                case 158:
                    break;
                case 75: {
                    return new WhileToken(getLine());
                }
                case 159:
                    break;
                case 54: {
                    return new OperatorToken(getLine(), OperatorTypes.DIV);
                }
                case 160:
                    break;
                case 4: {
                    return new IntegerToken(getLine(), (int) Long.parseLong(yytext()));
                }
                case 161:
                    break;
                case 11: {
                    return new OperatorToken(getLine(), OperatorTypes.EQUALS);
                }
                case 162:
                    break;
                case 58: {
                    return new OperatorToken(getLine(), OperatorTypes.SHIFTLEFT);
                }
                case 163:
                    break;
                case 80: {
                    return new RepeatToken(getLine());
                }
                case 164:
                    break;
                case 61: {
                    return new OperatorToken(getLine(), OperatorTypes.MOD);
                }
                case 165:
                    break;
                case 36: {
                    yybegin(YYINITIAL);
                    commitInclude();
                }
                case 166:
                    break;
                case 48: {
                    literal.append('\'');
                }
                case 167:
                    break;
                case 6: {
                }
                case 168:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            if (!yymoreStreams()) {
                                return new EOFToken(getLine());
                            }
                            sourcenames.pop();
                            yypopStream();
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
