/* The following code was generated by JFlex 1.4.3 on 4/30/17 3:05 PM */

package com.duy.pascal.backend.tokenizer;

import com.duy.pascal.backend.exceptions.grouping.EnumeratedGroupingException;
import com.duy.pascal.backend.exceptions.grouping.StrayCharacterException;
import com.duy.pascal.backend.linenumber.LineInfo;
import com.duy.pascal.backend.tokens.CommentToken;
import com.duy.pascal.backend.tokens.EOFToken;
import com.duy.pascal.backend.tokens.GroupingExceptionToken;
import com.duy.pascal.backend.tokens.OperatorToken;
import com.duy.pascal.backend.tokens.OperatorTypes;
import com.duy.pascal.backend.tokens.Token;
import com.duy.pascal.backend.tokens.WarningToken;
import com.duy.pascal.backend.tokens.WordToken;
import com.duy.pascal.backend.tokens.basic.ArrayToken;
import com.duy.pascal.backend.tokens.basic.AssignmentToken;
import com.duy.pascal.backend.tokens.basic.BreakToken;
import com.duy.pascal.backend.tokens.basic.ColonToken;
import com.duy.pascal.backend.tokens.basic.CommaToken;
import com.duy.pascal.backend.tokens.basic.ConstToken;
import com.duy.pascal.backend.tokens.basic.DoToken;
import com.duy.pascal.backend.tokens.basic.DotDotToken;
import com.duy.pascal.backend.tokens.basic.DowntoToken;
import com.duy.pascal.backend.tokens.basic.ElseToken;
import com.duy.pascal.backend.tokens.basic.ForToken;
import com.duy.pascal.backend.tokens.basic.ForwardToken;
import com.duy.pascal.backend.tokens.basic.FunctionToken;
import com.duy.pascal.backend.tokens.basic.IfToken;
import com.duy.pascal.backend.tokens.basic.OfToken;
import com.duy.pascal.backend.tokens.basic.PeriodToken;
import com.duy.pascal.backend.tokens.basic.ProcedureToken;
import com.duy.pascal.backend.tokens.basic.ProgramToken;
import com.duy.pascal.backend.tokens.basic.RepeatToken;
import com.duy.pascal.backend.tokens.basic.SemicolonToken;
import com.duy.pascal.backend.tokens.basic.ThenToken;
import com.duy.pascal.backend.tokens.basic.ToToken;
import com.duy.pascal.backend.tokens.basic.TypeToken;
import com.duy.pascal.backend.tokens.basic.UntilToken;
import com.duy.pascal.backend.tokens.basic.UsesToken;
import com.duy.pascal.backend.tokens.basic.VarToken;
import com.duy.pascal.backend.tokens.basic.WhileToken;
import com.duy.pascal.backend.tokens.closing.EndBracketToken;
import com.duy.pascal.backend.tokens.closing.EndParenToken;
import com.duy.pascal.backend.tokens.closing.EndToken;
import com.duy.pascal.backend.tokens.grouping.BeginEndToken;
import com.duy.pascal.backend.tokens.grouping.BracketedToken;
import com.duy.pascal.backend.tokens.grouping.CaseToken;
import com.duy.pascal.backend.tokens.grouping.ParenthesizedToken;
import com.duy.pascal.backend.tokens.grouping.RecordToken;
import com.duy.pascal.backend.tokens.value.BooleanToken;
import com.duy.pascal.backend.tokens.value.CharacterToken;
import com.duy.pascal.backend.tokens.value.DoubleToken;
import com.duy.pascal.backend.tokens.value.LongToken;
import com.duy.pascal.backend.tokens.value.StringToken;
import com.js.interpreter.core.ScriptSource;

import java.io.FileNotFoundException;
import java.io.Reader;
import java.util.List;
import java.util.Stack;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/30/17 3:05 PM from the specification file
 * <tt>C:/Git/pascal_ide/app/src/main/java/com/duy/pascal/backend/tokenizer/Lexer2.flex</tt>
 */
class Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int STRINGDONE = 4;
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    public static final int STRINGPOUND = 6;
    public static final int INCLUDE_SNGL_QUOTE = 12;
    public static final int INCLUDE = 8;
    public static final int END_INCLUDE = 14;
    public static final int INCLUDE_DBL_QUOTE = 10;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\5\1\7\2\0\1\6\22\0\1\63\1\0\1\62\1\3" +
                    "\1\17\2\0\1\61\1\11\1\14\1\12\1\41\1\53\1\42\1\4" +
                    "\1\16\12\2\1\52\1\54\1\43\1\40\1\44\2\0\1\27\1\55" +
                    "\1\22\1\25\1\26\1\45\1\51\1\35\1\20\1\1\1\56\1\23" +
                    "\1\37\1\21\1\30\1\50\1\1\1\32\1\34\1\31\1\24\1\36" +
                    "\1\46\1\33\1\47\1\1\1\57\1\0\1\60\1\0\1\1\1\0" +
                    "\1\27\1\55\1\22\1\25\1\26\1\45\1\51\1\35\1\20\1\1" +
                    "\1\56\1\23\1\37\1\21\1\30\1\50\1\1\1\32\1\34\1\31" +
                    "\1\24\1\36\1\46\1\33\1\47\1\1\1\13\1\10\1\15\uff82\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\6\0\1\2\1\3\1\4\1\2\1\5" +
                    "\1\6\1\7\1\10\1\2\1\11\1\12\16\3\1\13" +
                    "\1\14\1\15\1\16\1\17\3\3\1\20\1\21\1\22" +
                    "\1\3\1\23\1\24\1\25\1\1\1\26\1\27\4\30" +
                    "\1\31\1\32\1\33\1\34\1\6\1\35\1\36\1\37" +
                    "\1\1\1\40\2\34\2\41\1\42\1\0\1\43\1\44" +
                    "\5\0\1\45\6\3\1\46\4\3\1\47\1\50\1\51" +
                    "\10\3\1\52\1\53\1\54\5\3\1\55\2\3\1\56" +
                    "\1\0\1\57\1\56\2\0\1\60\2\0\1\61\2\0" +
                    "\1\62\3\0\1\61\1\63\4\3\1\64\1\3\1\65" +
                    "\1\3\1\66\6\3\1\67\1\70\1\71\1\72\1\73" +
                    "\2\3\1\74\4\3\3\0\1\62\3\0\1\75\2\0" +
                    "\1\76\2\3\1\77\1\3\1\100\1\3\1\101\1\102" +
                    "\1\103\12\3\1\0\1\75\2\0\1\104\1\105\1\3" +
                    "\1\106\3\3\1\107\1\3\1\110\2\3\1\111\1\112" +
                    "\1\61\2\0\1\113\1\114\1\115\4\3\2\0\1\3" +
                    "\1\116\1\3\1\117\2\0\1\120\1\3\1\0\1\121";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c" +
                    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u01a0" +
                    "\0\u030c\0\u01a0\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444" +
                    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4" +
                    "\0\u0618\0\u01a0\0\u01a0\0\u01a0\0\u064c\0\u0680\0\u06b4\0\u06e8" +
                    "\0\u071c\0\u0750\0\u01a0\0\u01a0\0\u0784\0\u01a0\0\u01a0\0\u01a0" +
                    "\0\u07b8\0\u01a0\0\u07ec\0\u01a0\0\u0820\0\u0854\0\u0340\0\u01a0" +
                    "\0\u01a0\0\u0888\0\u08bc\0\u08f0\0\u01a0\0\u08bc\0\u08bc\0\u0924" +
                    "\0\u01a0\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u09c0\0\u0a28\0\u023c" +
                    "\0\u01a0\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u01d4\0\u0b60" +
                    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00" +
                    "\0\u0d34\0\u0d68\0\u01d4\0\u01d4\0\u01d4\0\u0d9c\0\u0dd0\0\u0e04" +
                    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u01a0\0\u01a0\0\u01a0" +
                    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u01a0\0\u1040\0\u1074" +
                    "\0\u01a0\0\u10a8\0\u0924\0\u0924\0\u09c0\0\u09f4\0\u0a28\0\u10dc" +
                    "\0\u1110\0\u01a0\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248" +
                    "\0\u127c\0\u01d4\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u01d4\0\u1380" +
                    "\0\u01d4\0\u13b4\0\u01d4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8" +
                    "\0\u14ec\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u1520\0\u1554" +
                    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4" +
                    "\0\u16c0\0\u1728\0\u11ac\0\u175c\0\u1144\0\u1790\0\u17c4\0\u01d4" +
                    "\0\u17f8\0\u182c\0\u01d4\0\u1860\0\u01d4\0\u1894\0\u01d4\0\u01d4" +
                    "\0\u01d4\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00" +
                    "\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u16c0\0\u1b04\0\u1b38\0\u01d4" +
                    "\0\u01d4\0\u1b6c\0\u01d4\0\u1ba0\0\u1bd4\0\u1c08\0\u01d4\0\u1c3c" +
                    "\0\u01d4\0\u1c70\0\u1ca4\0\u01d4\0\u01d4\0\u11ac\0\u1cd8\0\u1d0c" +
                    "\0\u01d4\0\u01d4\0\u01d4\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10" +
                    "\0\u1e44\0\u1e78\0\u01d4\0\u1eac\0\u01d4\0\u1ee0\0\u1f14\0\u01d4" +
                    "\0\u1f48\0\u1f7c\0\u01d4";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\11\1\12\1\13\1\14\1\15\3\16\1\11\1\17" +
                    "\1\20\1\21\1\22\1\11\1\23\1\11\1\24\1\25" +
                    "\1\26\1\12\1\27\1\30\1\31\1\32\1\33\1\34" +
                    "\1\35\1\36\1\37\1\12\1\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\46\1\47\1\50\1\12\1\51\1\12" +
                    "\1\52\1\53\1\54\1\55\1\12\1\56\1\57\1\60" +
                    "\1\11\1\16\6\61\2\62\51\61\1\63\2\61\5\64" +
                    "\3\16\1\64\1\65\1\64\1\66\2\64\1\67\42\64" +
                    "\1\70\1\64\1\16\2\71\1\72\61\71\5\73\1\74" +
                    "\2\16\2\73\1\75\1\73\2\75\43\73\1\76\1\77" +
                    "\1\16\6\100\2\101\52\100\1\102\7\100\2\62\51\100" +
                    "\1\103\2\100\12\104\1\105\2\104\1\106\46\104\65\0" +
                    "\2\12\15\0\20\12\5\0\5\12\3\0\2\12\7\0" +
                    "\1\13\1\0\1\107\61\0\1\110\65\0\1\111\64\0" +
                    "\3\16\53\0\1\16\12\0\1\112\51\0\12\113\1\0" +
                    "\4\113\1\114\44\113\12\0\1\115\3\0\1\116\46\0" +
                    "\2\12\15\0\20\12\5\0\1\117\4\12\3\0\2\12" +
                    "\6\0\2\12\15\0\10\12\1\120\7\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\7\12\1\121\1\122" +
                    "\7\12\5\0\5\12\3\0\2\12\6\0\2\12\15\0" +
                    "\1\12\1\123\12\12\1\124\3\12\5\0\5\12\3\0" +
                    "\2\12\6\0\2\12\15\0\1\125\7\12\1\126\7\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\1\12" +
                    "\1\127\1\12\1\130\14\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\1\12\1\131\10\12\1\132\5\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\12\12" +
                    "\1\133\5\12\5\0\1\134\4\12\3\0\2\12\6\0" +
                    "\2\12\15\0\10\12\1\135\1\12\1\136\2\12\1\137" +
                    "\2\12\5\0\2\12\1\140\2\12\3\0\2\12\6\0" +
                    "\2\12\15\0\6\12\1\141\11\12\5\0\5\12\3\0" +
                    "\2\12\6\0\2\12\15\0\10\12\1\142\7\12\5\0" +
                    "\5\12\3\0\2\12\6\0\2\12\15\0\15\12\1\143" +
                    "\2\12\5\0\5\12\3\0\2\12\6\0\2\12\15\0" +
                    "\7\12\1\144\10\12\5\0\5\12\3\0\2\12\6\0" +
                    "\2\12\15\0\10\12\1\145\7\12\5\0\5\12\3\0" +
                    "\2\12\45\0\1\146\3\0\1\147\57\0\1\150\24\0" +
                    "\2\12\15\0\4\12\1\151\2\12\1\152\1\153\7\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\15\12" +
                    "\1\154\2\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\12\12\1\155\5\12\5\0\5\12\3\0\2\12" +
                    "\45\0\1\156\24\0\2\12\15\0\6\12\1\157\3\12" +
                    "\1\160\5\12\5\0\5\12\3\0\2\12\5\0\6\61" +
                    "\2\0\51\61\1\0\2\61\61\0\1\161\14\0\1\162" +
                    "\51\0\12\113\1\0\51\113\2\0\1\72\61\0\6\73" +
                    "\2\0\2\73\1\0\1\73\2\0\45\73\1\0\5\73" +
                    "\1\74\2\16\2\73\1\0\1\73\2\0\45\73\1\16" +
                    "\6\100\2\0\62\100\2\0\52\100\1\163\7\100\2\0" +
                    "\51\100\1\164\2\100\12\165\1\166\2\165\1\106\62\165" +
                    "\2\0\46\165\2\0\1\167\61\0\12\170\1\0\4\170" +
                    "\1\171\44\170\15\113\1\172\46\113\12\173\1\174\2\173" +
                    "\1\175\2\173\1\176\43\173\12\177\1\200\51\177\6\116" +
                    "\1\201\1\172\1\0\53\116\1\0\2\12\15\0\11\12" +
                    "\1\202\6\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\14\12\1\203\3\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\1\12\1\204\16\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\11\12\1\205\6\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\6\12" +
                    "\1\206\11\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\16\12\1\207\1\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\20\12\5\0\1\12\1\210\3\12" +
                    "\3\0\2\12\6\0\2\12\15\0\5\12\1\211\12\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\14\12" +
                    "\1\212\3\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\5\12\1\213\12\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\12\12\1\214\5\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\4\12\1\215\13\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\6\12" +
                    "\1\216\11\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\20\12\5\0\3\12\1\217\1\12\3\0\2\12" +
                    "\6\0\2\12\15\0\2\12\1\220\15\12\5\0\3\12" +
                    "\1\221\1\12\3\0\2\12\6\0\2\12\15\0\12\12" +
                    "\1\222\5\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\3\12\1\223\6\12\1\224\5\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\12\12\1\225\5\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\5\12" +
                    "\1\226\12\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\1\12\1\227\16\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\3\12\1\230\14\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\12\12\1\231\5\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\1\232" +
                    "\17\12\5\0\5\12\3\0\2\12\6\0\2\12\15\0" +
                    "\10\12\1\233\7\12\5\0\5\12\3\0\2\12\6\0" +
                    "\2\12\15\0\20\12\5\0\4\12\1\234\3\0\2\12" +
                    "\6\0\2\12\15\0\6\12\1\235\11\12\5\0\5\12" +
                    "\3\0\2\12\5\0\12\170\1\0\63\170\1\236\51\170" +
                    "\12\237\1\240\2\237\1\241\2\237\1\242\43\237\12\173" +
                    "\1\174\2\173\1\175\62\173\1\113\1\172\46\173\12\243" +
                    "\1\244\2\243\1\175\46\243\5\173\1\245\4\173\1\174" +
                    "\2\173\1\175\3\173\1\246\41\173\1\245\12\177\1\247" +
                    "\51\177\12\0\1\200\3\0\1\172\54\0\1\172\55\0" +
                    "\2\12\15\0\6\12\1\250\11\12\5\0\5\12\3\0" +
                    "\2\12\6\0\2\12\15\0\14\12\1\251\3\12\5\0" +
                    "\5\12\3\0\2\12\6\0\2\12\15\0\1\252\17\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\14\12" +
                    "\1\253\3\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\1\12\1\254\16\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\6\12\1\255\11\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\7\12\1\256\10\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\6\12" +
                    "\1\257\11\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\1\12\1\260\16\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\6\12\1\261\11\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\10\12\1\262\7\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\6\12" +
                    "\1\263\11\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\2\12\1\264\15\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\14\12\1\265\3\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\20\12\5\0\1\12" +
                    "\1\266\3\12\3\0\2\12\6\0\2\12\15\0\3\12" +
                    "\1\267\14\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\2\12\1\270\15\12\5\0\4\12\1\271\3\0" +
                    "\2\12\6\0\2\12\15\0\1\272\17\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\7\12\1\273\10\12" +
                    "\5\0\5\12\3\0\2\12\5\0\12\170\1\236\1\170" +
                    "\1\172\47\170\12\237\1\240\2\237\1\241\60\237\1\274" +
                    "\1\237\1\172\1\170\53\237\1\275\4\237\1\240\2\237" +
                    "\1\241\3\237\1\276\41\237\1\275\14\243\2\0\46\243" +
                    "\12\173\1\174\2\173\1\175\4\173\1\277\41\173\12\177" +
                    "\1\247\3\177\1\172\45\177\1\0\2\12\15\0\11\12" +
                    "\1\300\6\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\3\12\1\301\14\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\11\12\1\302\6\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\20\12\5\0\2\12" +
                    "\1\303\2\12\3\0\2\12\6\0\2\12\15\0\12\12" +
                    "\1\304\5\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\7\12\1\305\10\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\11\12\1\306\6\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\6\12\1\307\11\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\7\12" +
                    "\1\310\10\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\6\12\1\311\11\12\5\0\5\12\3\0\2\12" +
                    "\6\0\2\12\15\0\6\12\1\312\11\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\12\12\1\313\5\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\1\12" +
                    "\1\314\16\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\20\12\5\0\5\12\3\0\1\12\1\315\5\0" +
                    "\12\237\1\240\1\237\1\316\1\241\60\237\1\240\2\237" +
                    "\1\241\4\237\1\317\41\237\12\173\1\174\2\173\1\175" +
                    "\5\173\1\320\40\173\1\0\2\12\15\0\10\12\1\321" +
                    "\7\12\5\0\5\12\3\0\2\12\6\0\2\12\15\0" +
                    "\5\12\1\322\12\12\5\0\5\12\3\0\2\12\6\0" +
                    "\2\12\15\0\11\12\1\323\6\12\5\0\5\12\3\0" +
                    "\2\12\6\0\2\12\15\0\1\324\17\12\5\0\5\12" +
                    "\3\0\2\12\6\0\2\12\15\0\12\12\1\325\5\12" +
                    "\5\0\5\12\3\0\2\12\6\0\2\12\15\0\5\12" +
                    "\1\326\12\12\5\0\5\12\3\0\2\12\6\0\2\12" +
                    "\15\0\7\12\1\327\10\12\5\0\5\12\3\0\2\12" +
                    "\5\0\12\237\1\240\2\237\1\241\5\237\1\330\40\237" +
                    "\12\173\1\174\2\173\1\175\6\173\1\331\37\173\1\0" +
                    "\2\12\15\0\10\12\1\332\7\12\5\0\5\12\3\0" +
                    "\2\12\6\0\2\12\15\0\5\12\1\333\12\12\5\0" +
                    "\5\12\3\0\2\12\6\0\2\12\15\0\4\12\1\334" +
                    "\13\12\5\0\5\12\3\0\2\12\6\0\2\12\15\0" +
                    "\17\12\1\335\5\0\5\12\3\0\2\12\5\0\12\237" +
                    "\1\240\2\237\1\241\6\237\1\336\37\237\12\173\1\174" +
                    "\2\173\1\175\7\173\1\337\36\173\1\0\2\12\15\0" +
                    "\1\12\1\340\16\12\5\0\5\12\3\0\2\12\6\0" +
                    "\2\12\15\0\12\12\1\341\5\12\5\0\5\12\3\0" +
                    "\2\12\5\0\12\237\1\240\2\237\1\241\7\237\1\342" +
                    "\36\237\12\173\1\174\2\173\1\175\10\173\1\245\35\173" +
                    "\1\0\2\12\15\0\6\12\1\343\11\12\5\0\5\12" +
                    "\3\0\2\12\5\0\12\237\1\240\2\237\1\241\10\237" +
                    "\1\275\35\237";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\1\6\0\1\11\6\1\1\11\1\1\1\11" +
                    "\17\1\3\11\6\1\2\11\1\1\3\11\1\1\1\11" +
                    "\1\1\1\11\3\1\2\11\3\1\1\11\3\1\1\11" +
                    "\5\1\1\0\1\1\1\11\5\0\27\1\3\11\5\1" +
                    "\1\11\2\1\1\11\1\0\2\1\2\0\1\1\2\0" +
                    "\1\11\2\0\1\1\3\0\35\1\3\0\1\1\3\0" +
                    "\1\1\2\0\24\1\1\0\1\1\2\0\17\1\2\0" +
                    "\7\1\2\0\4\1\2\0\2\1\1\0\1\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /* user code: */
    List<ScriptSource> searchDirectories;
    Stack<String> sourcenames;
    StringBuilder literal = new StringBuilder();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;
    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;
    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;
    private Stack zzStreams = new Stack();
    private String tmpname;
    private Reader tmpreader;

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
        sourcenames = new Stack<String>();
        sourcenames.push(sourcename);
        this.searchDirectories = searchDirectories;
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    Lexer(java.io.InputStream in, String sourcename, List<ScriptSource> searchDirectories) {
        this(new java.io.InputStreamReader(in), sourcename, searchDirectories);
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[227];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[227];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[8112];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[227];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 180) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    void addInclude(String name) throws FileNotFoundException {
        for (ScriptSource s : searchDirectories) {
            Reader r = s.read(name);
            if (r != null) {
                this.tmpreader = r;
                this.tmpname = name;
                return;
            }
        }
        throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
    }

    void commitInclude() {
        sourcenames.push(tmpname);
        yypushStream(tmpreader);
    }

    public final boolean yymoreStreams() {
        return !zzStreams.isEmpty();
    }

    public final void yypopStream() throws java.io.IOException {
        zzReader.close();
        ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
        zzBuffer = s.zzBuffer;
        zzReader = s.zzReader;
        zzEndRead = s.zzEndRead;
        zzStartRead = s.zzStartRead;
        zzCurrentPos = s.zzCurrentPos;
        zzMarkedPos = s.zzMarkedPos;
        zzAtEOF = s.zzAtEOF;
        zzEOFDone = s.zzEOFDone;
        yyline = s.yyline;
        yycolumn = s.yycolumn;
    }

    public final void yypushStream(Reader reader) {
        zzStreams.push(
                new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
        );
        zzAtEOF = false;
        zzBuffer = new char[ZZ_BUFFERSIZE];
        zzReader = reader;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yycolumn = 0;
    }

    LineInfo getLine() {
        return new LineInfo(yyline, yycolumn, sourcenames.peek());
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

    /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 21: {
                    literal.setLength(0);
                    yybegin(STRING);
                }
                case 82:
                    break;
                case 20: {
                    return new EndBracketToken(getLine());
                }
                case 83:
                    break;
                case 9: {
                    return new EndParenToken(getLine());
                }
                case 84:
                    break;
                case 31: {
                    literal.setLength(0);
                    yybegin(INCLUDE_DBL_QUOTE);
                }
                case 85:
                    break;
                case 67: {
                    return new TypeToken(getLine());
                }
                case 86:
                    break;
                case 69: {
                    return new UntilToken(getLine());
                }
                case 87:
                    break;
                case 2: {
                    return new GroupingExceptionToken(new StrayCharacterException(getLine(), yytext().charAt(0)));
                }
                case 88:
                    break;
                case 37: {
                    return new IfToken(getLine());
                }
                case 89:
                    break;
                case 54: {
                    return new OperatorToken(getLine(), OperatorTypes.AND);
                }
                case 90:
                    break;
                case 71: {
                    return new BooleanToken(getLine(), false);
                }
                case 91:
                    break;
                case 74: {
                    return new BreakToken(getLine());
                }
                case 92:
                    break;
                case 81: {
                    return new ProcedureToken(getLine());
                }
                case 93:
                    break;
                case 7: {
                    return new ParenthesizedToken(getLine());
                }
                case 94:
                    break;
                case 51: {
                    return new OperatorToken(getLine(), OperatorTypes.NOT);
                }
                case 95:
                    break;
                case 75: {
                    return new DowntoToken(getLine());
                }
                case 96:
                    break;
                case 26: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.INCOMPLETE_CHAR);
                }
                case 97:
                    break;
                case 57: {
                    return new OperatorToken(getLine(), OperatorTypes.SHIFTRIGHT);
                }
                case 98:
                    break;
                case 43: {
                    return new OperatorToken(getLine(), OperatorTypes.NOTEQUAL);
                }
                case 99:
                    break;
                case 17: {
                    return new CommaToken(getLine());
                }
                case 100:
                    break;
                case 22: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.NEWLINE_IN_QUOTES);
                }
                case 101:
                    break;
                case 4: {
                    return new LongToken(getLine(), Long.parseLong(yytext()));
                }
                case 102:
                    break;
                case 18: {
                    return new SemicolonToken(getLine());
                }
                case 103:
                    break;
                case 28: {
                    try {
                        addInclude(yytext());
                    } catch (FileNotFoundException e) {
                        EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                        t.caused = e;
                        return new GroupingExceptionToken(t);
                    }
                    yybegin(END_INCLUDE);
                }
                case 104:
                    break;
                case 60: {
                    return new ForToken(getLine());
                }
                case 105:
                    break;
                case 70: {
                    return new ArrayToken(getLine());
                }
                case 106:
                    break;
                case 12: {
                    return new OperatorToken(getLine(), OperatorTypes.PLUS);
                }
                case 107:
                    break;
                case 45: {
                    return new AssignmentToken(getLine());
                }
                case 108:
                    break;
                case 23: {
                    yybegin(STRINGDONE);
                }
                case 109:
                    break;
                case 14: {
                    return new OperatorToken(getLine(), OperatorTypes.LESSTHAN);
                }
                case 110:
                    break;
                case 30: {
                    literal.setLength(0);
                    yybegin(INCLUDE_SNGL_QUOTE);
                }
                case 111:
                    break;
                case 55: {
                    return new OperatorToken(getLine(), OperatorTypes.XOR);
                }
                case 112:
                    break;
                case 49: {
                    return new CommentToken(getLine(), yytext());
                }
                case 113:
                    break;
                case 5: {
                    return new PeriodToken(getLine());
                }
                case 114:
                    break;
                case 3: {
                    return new WordToken(getLine(), yytext());
                }
                case 115:
                    break;
                case 15: {
                    return new OperatorToken(getLine(), OperatorTypes.GREATERTHAN);
                }
                case 116:
                    break;
                case 53: {
                    return new EndToken(getLine());
                }
                case 117:
                    break;
                case 42: {
                    return new OperatorToken(getLine(), OperatorTypes.LESSEQ);
                }
                case 118:
                    break;
                case 65: {
                    return new BooleanToken(getLine(), true);
                }
                case 119:
                    break;
                case 36: {
                    return new DotDotToken(getLine());
                }
                case 120:
                    break;
                case 80: {
                    return new FunctionToken(getLine());
                }
                case 121:
                    break;
                case 1: {
                    literal.append(yytext());
                }
                case 122:
                    break;
                case 62: {
                    return new CaseToken(getLine());
                }
                case 123:
                    break;
                case 66: {
                    return new ThenToken(getLine());
                }
                case 124:
                    break;
                case 68: {
                    return new ConstToken(getLine());
                }
                case 125:
                    break;
                case 39: {
                    return new OperatorToken(getLine(), OperatorTypes.OR);
                }
                case 126:
                    break;
                case 61: {
                    yybegin(INCLUDE);
                }
                case 127:
                    break;
                case 79: {
                    return new ProgramToken(getLine());
                }
                case 128:
                    break;
                case 13: {
                    return new OperatorToken(getLine(), OperatorTypes.MINUS);
                }
                case 129:
                    break;
                case 24: {
                    yypushback(1);
                    yybegin(YYINITIAL);
                    if (literal.length() == 1) {
                        return new CharacterToken(getLine(), literal.toString().charAt(0));
                        //return new CharacterToken(getLine(),literal.toString());
                    } else {
                        return new StringToken(getLine(), literal.toString());
                    }
                }
                case 130:
                    break;
                case 35: {
                    return new CharacterToken(getLine(), yytext());
                }
                case 131:
                    break;
                case 8: {
                    return new OperatorToken(getLine(), OperatorTypes.MULTIPLY);
                }
                case 132:
                    break;
                case 40: {
                    return new OfToken(getLine());
                }
                case 133:
                    break;
                case 33: {
                    return new GroupingExceptionToken(getLine(),
                            EnumeratedGroupingException.GroupingExceptionTypes.MISMATCHED_BRACKETS);
                }
                case 134:
                    break;
                case 50: {
                    return new WarningToken(getLine(), "Warning! Unrecognized Compiler Directive!");
                }
                case 135:
                    break;
                case 25: {
                    yybegin(STRING);
                }
                case 136:
                    break;
                case 44: {
                    return new OperatorToken(getLine(), OperatorTypes.GREATEREQ);
                }
                case 137:
                    break;
                case 58: {
                    return new VarToken(getLine());
                }
                case 138:
                    break;
                case 19: {
                    return new BracketedToken(getLine());
                }
                case 139:
                    break;
                case 10: {
                    return new OperatorToken(getLine(), OperatorTypes.DIVIDE);
                }
                case 140:
                    break;
                case 41: {
                    return new ToToken(getLine());
                }
                case 141:
                    break;
                case 78: {
                    return new ForwardToken(getLine());
                }
                case 142:
                    break;
                case 73: {
                    return new BeginEndToken(getLine());
                }
                case 143:
                    break;
                case 38: {
                    return new DoToken(getLine());
                }
                case 144:
                    break;
                case 16: {
                    return new ColonToken(getLine());
                }
                case 145:
                    break;
                case 47: {
                    literal.append('\"');
                }
                case 146:
                    break;
                case 48: {
                    return new DoubleToken(getLine(), Double.parseDouble(yytext()));
                }
                case 147:
                    break;
                case 64: {
                    return new ElseToken(getLine());
                }
                case 148:
                    break;
                case 27: {
                    literal.append((char) Integer.parseInt(yytext()));
                    yybegin(STRINGDONE);
                }
                case 149:
                    break;
                case 63: {
                    return new UsesToken(getLine());
                }
                case 150:
                    break;
                case 76: {
                    return new RecordToken(getLine());
                }
                case 151:
                    break;
                case 72: {
                    return new WhileToken(getLine());
                }
                case 152:
                    break;
                case 52: {
                    return new OperatorToken(getLine(), OperatorTypes.DIV);
                }
                case 153:
                    break;
                case 11: {
                    return new OperatorToken(getLine(), OperatorTypes.EQUALS);
                }
                case 154:
                    break;
                case 56: {
                    return new OperatorToken(getLine(), OperatorTypes.SHIFTLEFT);
                }
                case 155:
                    break;
                case 77: {
                    return new RepeatToken(getLine());
                }
                case 156:
                    break;
                case 59: {
                    return new OperatorToken(getLine(), OperatorTypes.MOD);
                }
                case 157:
                    break;
                case 32: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                }
                case 158:
                    break;
                case 34: {
                    yybegin(YYINITIAL);
                    commitInclude();
                }
                case 159:
                    break;
                case 29: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.MISSING_INCLUDE);
                }
                case 160:
                    break;
                case 46: {
                    literal.append('\'');
                }
                case 161:
                    break;
                case 6: {
                }
                case 162:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            if (!yymoreStreams()) {
                                return new EOFToken(getLine());
                            }
                            sourcenames.pop();
                            yypopStream();
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
