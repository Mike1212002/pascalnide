/* The following code was generated by JFlex 1.4.3 on 5/12/17 11:28 PM */

package com.duy.pascal.backend.tokenizer;

import com.duy.pascal.backend.exceptions.grouping.EnumeratedGroupingException;
import com.duy.pascal.backend.exceptions.grouping.StrayCharacterException;
import com.duy.pascal.backend.linenumber.LineInfo;
import com.duy.pascal.backend.tokens.CommentToken;
import com.duy.pascal.backend.tokens.EOFToken;
import com.duy.pascal.backend.tokens.GroupingExceptionToken;
import com.duy.pascal.backend.tokens.OperatorToken;
import com.duy.pascal.backend.tokens.OperatorTypes;
import com.duy.pascal.backend.tokens.Token;
import com.duy.pascal.backend.tokens.WarningToken;
import com.duy.pascal.backend.tokens.WordToken;
import com.duy.pascal.backend.tokens.basic.ArrayToken;
import com.duy.pascal.backend.tokens.basic.AssignmentToken;
import com.duy.pascal.backend.tokens.basic.BreakToken;
import com.duy.pascal.backend.tokens.basic.ColonToken;
import com.duy.pascal.backend.tokens.basic.CommaToken;
import com.duy.pascal.backend.tokens.basic.ConstToken;
import com.duy.pascal.backend.tokens.basic.ContinueToken;
import com.duy.pascal.backend.tokens.basic.DoToken;
import com.duy.pascal.backend.tokens.basic.DotDotToken;
import com.duy.pascal.backend.tokens.basic.DowntoToken;
import com.duy.pascal.backend.tokens.basic.ElseToken;
import com.duy.pascal.backend.tokens.basic.ForToken;
import com.duy.pascal.backend.tokens.basic.ForwardToken;
import com.duy.pascal.backend.tokens.basic.FunctionToken;
import com.duy.pascal.backend.tokens.basic.IfToken;
import com.duy.pascal.backend.tokens.basic.OfToken;
import com.duy.pascal.backend.tokens.basic.PeriodToken;
import com.duy.pascal.backend.tokens.basic.ProcedureToken;
import com.duy.pascal.backend.tokens.basic.ProgramToken;
import com.duy.pascal.backend.tokens.basic.RepeatToken;
import com.duy.pascal.backend.tokens.basic.SemicolonToken;
import com.duy.pascal.backend.tokens.basic.ThenToken;
import com.duy.pascal.backend.tokens.basic.ToToken;
import com.duy.pascal.backend.tokens.basic.TypeToken;
import com.duy.pascal.backend.tokens.basic.UntilToken;
import com.duy.pascal.backend.tokens.basic.UsesToken;
import com.duy.pascal.backend.tokens.basic.VarToken;
import com.duy.pascal.backend.tokens.basic.WhileToken;
import com.duy.pascal.backend.tokens.basic.WithToken;
import com.duy.pascal.backend.tokens.closing.EndBracketToken;
import com.duy.pascal.backend.tokens.closing.EndParenToken;
import com.duy.pascal.backend.tokens.closing.EndToken;
import com.duy.pascal.backend.tokens.grouping.BeginEndToken;
import com.duy.pascal.backend.tokens.grouping.BracketedToken;
import com.duy.pascal.backend.tokens.grouping.CaseToken;
import com.duy.pascal.backend.tokens.grouping.ParenthesizedToken;
import com.duy.pascal.backend.tokens.grouping.RecordToken;
import com.duy.pascal.backend.tokens.value.BooleanToken;
import com.duy.pascal.backend.tokens.value.CharacterToken;
import com.duy.pascal.backend.tokens.value.DoubleToken;
import com.duy.pascal.backend.tokens.value.IntegerToken;
import com.duy.pascal.backend.tokens.value.StringToken;
import com.js.interpreter.core.ScriptSource;

import java.io.FileNotFoundException;
import java.io.Reader;
import java.util.List;
import java.util.Stack;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/12/17 11:28 PM from the specification file
 * <tt>C:/github/pascalnide/app/src/main/java/com/duy/pascal/backend/tokenizer/Lexer2.flex</tt>
 */
class Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int STRINGDONE = 4;
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    public static final int STRINGPOUND = 6;
    public static final int INCLUDE_SNGL_QUOTE = 12;
    public static final int INCLUDE = 8;
    public static final int END_INCLUDE = 14;
    public static final int INCLUDE_DBL_QUOTE = 10;
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\4\1\6\2\0\1\5\22\0\1\71\1\0\1\70\1\3" +
                    "\1\13\1\15\1\20\1\67\1\22\1\25\1\23\1\50\1\62\1\11" +
                    "\1\12\1\27\2\16\6\21\2\1\1\61\1\63\1\51\1\47\1\52" +
                    "\1\0\1\53\1\36\1\17\1\32\1\35\1\10\1\14\1\60\1\44" +
                    "\1\30\1\2\1\64\1\33\1\46\1\31\1\37\1\57\1\2\1\41" +
                    "\1\43\1\40\1\34\1\45\1\55\1\42\1\56\1\2\1\65\1\0" +
                    "\1\66\1\54\1\2\1\0\1\36\1\17\1\32\1\35\1\10\1\14" +
                    "\1\60\1\44\1\30\1\2\1\64\1\33\1\46\1\31\1\37\1\57" +
                    "\1\2\1\41\1\43\1\40\1\34\1\45\1\55\1\42\1\56\1\2" +
                    "\1\24\1\7\1\26\uff82\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\6\0\1\2\1\3\1\4\1\2\1\5" +
                    "\1\4\1\6\1\7\1\2\1\4\1\2\1\4\1\2" +
                    "\1\10\1\11\1\2\1\12\1\13\15\4\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\2\4\1\22\1\23\1\24" +
                    "\1\25\1\26\1\27\1\1\1\30\1\31\4\32\1\33" +
                    "\1\34\1\35\1\36\1\5\1\37\1\40\1\41\1\1" +
                    "\1\42\2\36\2\43\1\44\2\0\1\45\1\46\2\4" +
                    "\1\47\1\50\3\4\1\45\2\4\1\51\5\0\1\52" +
                    "\1\53\6\4\1\54\2\4\1\55\1\56\1\57\10\4" +
                    "\1\60\1\61\1\62\3\4\1\63\1\64\1\0\1\65" +
                    "\1\64\2\0\1\3\1\0\1\3\1\66\3\4\1\67" +
                    "\2\4\2\0\1\70\2\0\1\71\3\0\1\70\1\72" +
                    "\4\4\1\73\1\4\1\74\6\4\1\75\1\76\1\77" +
                    "\1\100\1\101\3\4\1\102\5\4\3\0\1\71\3\0" +
                    "\1\103\2\0\1\104\3\4\1\105\2\4\1\106\1\107" +
                    "\1\110\2\4\1\111\4\4\1\112\1\4\1\113\1\114" +
                    "\1\0\1\103\2\0\1\4\1\115\1\116\1\4\1\117" +
                    "\2\4\1\120\4\4\1\70\2\0\1\4\1\121\1\122" +
                    "\1\123\3\4\1\124\2\0\2\4\1\125\1\126\2\0" +
                    "\1\127\1\4\1\0\1\130";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196" +
                    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u01d0\0\u032c" +
                    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u01d0\0\u04c2" +
                    "\0\u01d0\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658" +
                    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u01d0" +
                    "\0\u01d0\0\u0828\0\u0862\0\u01d0\0\u01d0\0\u089c\0\u08d6\0\u0910" +
                    "\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u094a\0\u01d0\0\u0984" +
                    "\0\u01d0\0\u09be\0\u09f8\0\u04fc\0\u01d0\0\u01d0\0\u0a32\0\u0a6c" +
                    "\0\u0aa6\0\u01d0\0\u0a6c\0\u0a6c\0\u0ae0\0\u01d0\0\u0b1a\0\u0b54" +
                    "\0\u0b8e\0\u0bc8\0\u0b8e\0\u0c02\0\u0c3c\0\u01d0\0\u027e\0\u0c76" +
                    "\0\u0cb0\0\u01d0\0\u0366\0\u0cea\0\u0d24\0\u0d5e\0\u03da\0\u0d98" +
                    "\0\u0dd2\0\u044e\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0244" +
                    "\0\u0244\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a" +
                    "\0\u10c4\0\u10fe\0\u0244\0\u0244\0\u0244\0\u1138\0\u1172\0\u11ac" +
                    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u01d0\0\u01d0\0\u01d0" +
                    "\0\u1308\0\u1342\0\u137c\0\u01d0\0\u01d0\0\u13b6\0\u0ae0\0\u0ae0" +
                    "\0\u0b8e\0\u0bc8\0\u13f0\0\u13f0\0\u142a\0\u0244\0\u1464\0\u149e" +
                    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u01d0\0\u1634" +
                    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u0244\0\u17ca" +
                    "\0\u1804\0\u183e\0\u1878\0\u0244\0\u18b2\0\u0244\0\u18ec\0\u1926" +
                    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u0244\0\u0244\0\u0244\0\u0244" +
                    "\0\u0244\0\u1a48\0\u1a82\0\u1abc\0\u0244\0\u1af6\0\u1b30\0\u1b6a" +
                    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1c52\0\u1cc6\0\u16a8" +
                    "\0\u1d00\0\u1634\0\u1d3a\0\u1d74\0\u0244\0\u1dae\0\u1de8\0\u1e22" +
                    "\0\u0244\0\u1e5c\0\u1e96\0\u0244\0\u0244\0\u0244\0\u1ed0\0\u1f0a" +
                    "\0\u0244\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u0244\0\u202c\0\u0244" +
                    "\0\u0244\0\u2066\0\u1c52\0\u20a0\0\u20da\0\u2114\0\u0244\0\u0244" +
                    "\0\u214e\0\u0244\0\u2188\0\u21c2\0\u0244\0\u21fc\0\u2236\0\u2270" +
                    "\0\u22aa\0\u16a8\0\u22e4\0\u231e\0\u2358\0\u0244\0\u0244\0\u0244" +
                    "\0\u2392\0\u23cc\0\u2406\0\u0244\0\u2440\0\u247a\0\u24b4\0\u24ee" +
                    "\0\u0244\0\u0244\0\u2528\0\u2562\0\u0244\0\u259c\0\u25d6\0\u0244";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\11\1\12\1\13\1\14\3\15\1\11\1\16\1\17" +
                    "\1\20\1\21\1\22\1\23\1\12\1\24\1\25\1\12" +
                    "\1\26\1\27\1\30\1\31\1\11\1\32\1\33\1\34" +
                    "\1\35\1\13\1\36\1\37\1\40\1\41\1\42\1\43" +
                    "\1\44\1\45\1\13\1\46\1\47\1\50\1\51\1\52" +
                    "\1\53\1\54\1\55\1\56\1\13\1\57\1\13\1\60" +
                    "\1\61\1\62\1\13\1\63\1\64\1\65\1\11\1\15" +
                    "\5\66\2\67\60\66\1\70\2\66\4\71\3\15\13\71" +
                    "\1\72\1\71\1\73\2\71\1\74\37\71\1\75\1\71" +
                    "\1\15\1\76\1\77\14\76\1\77\2\76\1\77\50\76" +
                    "\4\100\1\101\2\15\14\100\1\102\1\100\2\102\40\100" +
                    "\1\103\1\104\1\15\5\105\2\106\61\105\1\107\6\105" +
                    "\2\67\60\105\1\110\2\105\23\111\1\112\2\111\1\113" +
                    "\43\111\73\0\1\12\6\0\1\114\1\0\1\115\3\0" +
                    "\1\12\1\116\1\0\1\12\51\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\17\13" +
                    "\6\0\4\13\3\0\1\13\6\0\1\117\14\0\1\117" +
                    "\2\0\1\117\54\0\3\15\62\0\1\15\1\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\1\13\1\120\1\13\1\121\13\13\6\0\4\13" +
                    "\3\0\1\13\17\0\1\122\60\0\1\123\6\0\1\123" +
                    "\3\0\1\123\1\0\2\123\1\0\1\123\10\0\1\123" +
                    "\2\0\2\123\34\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\4\13\1\124\1\13" +
                    "\1\125\1\126\7\13\6\0\4\13\3\0\1\13\23\0" +
                    "\1\127\54\0\2\13\5\0\1\130\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\11\13\1\131\5\13\6\0" +
                    "\4\13\3\0\1\13\23\0\1\132\2\0\1\132\73\0" +
                    "\1\133\46\0\13\134\1\135\7\134\1\0\46\134\23\0" +
                    "\1\136\3\0\1\137\43\0\2\13\5\0\1\13\3\0" +
                    "\1\140\1\0\2\13\1\0\1\13\6\0\1\13\1\141" +
                    "\15\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\7\13\1\142\7\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\6\13\1\143\1\144\7\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\1\13\1\145\11\13" +
                    "\1\146\3\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\1\147\6\13\1\150\7\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\1\13\1\151\7\13\1\152" +
                    "\5\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\153\1\0\2\13\1\0\1\13\6\0" +
                    "\11\13\1\154\5\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\7\13\1\155\1\13\1\156\2\13\1\157" +
                    "\2\13\6\0\1\13\1\160\2\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\161\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\17\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\7\13\1\162\7\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\14\13\1\163\2\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\6\13\1\164" +
                    "\10\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\7\13\1\165\7\13\6\0\4\13\3\0\1\13\54\0" +
                    "\1\166\2\0\1\167\66\0\1\170\23\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\1\171\13\13\1\172\2\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\11\13\1\173\5\13\6\0\4\13" +
                    "\3\0\1\13\54\0\1\174\22\0\5\66\2\0\60\66" +
                    "\1\0\2\66\67\0\1\175\25\0\1\176\46\0\23\134" +
                    "\1\0\46\134\1\0\1\77\14\0\1\77\2\0\1\77" +
                    "\50\0\5\100\2\0\14\100\1\0\1\100\2\0\42\100" +
                    "\1\0\4\100\1\101\2\15\14\100\1\0\1\100\2\0" +
                    "\42\100\1\15\5\105\2\0\70\105\2\0\61\105\1\177" +
                    "\6\105\2\0\60\105\1\200\2\105\23\201\1\202\2\201" +
                    "\1\113\70\201\2\0\43\201\1\0\1\203\7\0\1\204" +
                    "\4\0\1\203\2\0\1\203\26\0\1\204\22\0\1\205" +
                    "\14\0\1\205\2\0\1\205\51\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\5\13" +
                    "\1\206\11\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\13\13\1\207\3\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\1\13\1\210\15\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\3\13\1\211\13\13" +
                    "\6\0\4\13\3\0\1\13\6\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\11\13" +
                    "\1\212\5\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\17\13\6\0\3\13\1\213\3\0\1\13\6\0" +
                    "\2\13\5\0\1\214\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\17\13\6\0\4\13\3\0\1\13\5\0" +
                    "\13\215\1\216\7\215\1\0\46\215\26\134\1\217\43\134" +
                    "\23\220\1\221\2\220\1\222\1\220\1\223\41\220\23\224" +
                    "\1\225\46\224\5\137\1\226\1\217\1\0\62\137\1\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\10\13\1\227\6\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\13\13\1\230\3\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\231" +
                    "\15\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\10\13\1\232\6\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\233\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\17\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\15\13\1\234\1\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\17\13\6\0\1\235\3\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\5\13\1\236\11\13" +
                    "\6\0\4\13\3\0\1\13\6\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\11\13" +
                    "\1\237\5\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\4\13\1\240\12\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\241\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\17\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\17\13\6\0\2\13\1\242\1\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\2\13\1\243\14\13" +
                    "\6\0\2\13\1\244\1\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\11\13\1\245\5\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\3\13\1\246\5\13\1\247\5\13" +
                    "\6\0\4\13\3\0\1\13\6\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\11\13" +
                    "\1\250\5\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\5\13\1\251\11\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\10\13\1\252\6\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\1\253\16\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\7\13\1\254" +
                    "\7\13\6\0\4\13\3\0\1\13\5\0\23\215\1\0" +
                    "\46\215\1\0\1\203\14\0\1\203\2\0\1\203\51\0" +
                    "\1\205\6\0\1\114\5\0\1\205\2\0\1\205\51\0" +
                    "\2\13\5\0\1\255\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\17\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\2\13\1\256\14\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\13\13\1\257\3\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\17\13\6\0" +
                    "\1\260\3\13\3\0\1\13\6\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\261" +
                    "\16\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\6\13\1\262\10\13\6\0\4\13\3\0\1\13\5\0" +
                    "\23\215\1\263\46\215\23\264\1\265\2\264\1\266\1\264" +
                    "\1\267\41\264\23\220\1\221\2\220\1\222\70\220\1\134" +
                    "\1\217\43\220\23\270\1\271\2\270\1\222\43\270\4\220" +
                    "\1\272\16\220\1\221\2\220\1\222\2\220\1\273\37\220" +
                    "\1\272\23\224\1\274\46\224\23\0\1\225\3\0\1\217" +
                    "\50\0\1\217\64\0\2\13\5\0\1\275\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\17\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\10\13\1\276\2\13" +
                    "\1\277\3\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\1\300\16\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\13\13\1\301\3\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\1\13\1\302\15\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\6\13\1\303" +
                    "\10\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\304\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\17\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\1\13\1\305\15\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\306\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\17\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\7\13\1\307\7\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\310\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\17\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\14\13\1\311\2\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\3\13\1\312" +
                    "\13\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\2\13\1\313\14\13\6\0\3\13\1\314\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\10\13\1\315\6\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\316\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\17\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\6\13\1\317\10\13" +
                    "\6\0\4\13\3\0\1\13\6\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\13" +
                    "\1\320\15\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\17\13\6\0\4\13\3\0\1\321\5\0\23\215" +
                    "\1\263\1\215\1\217\44\215\23\264\1\265\2\264\1\266" +
                    "\66\264\1\322\1\264\1\217\1\215\47\264\1\323\16\264" +
                    "\1\265\2\264\1\266\2\264\1\324\37\264\1\323\25\270" +
                    "\2\0\43\270\23\220\1\221\2\220\1\222\3\220\1\325" +
                    "\37\220\23\224\1\274\3\224\1\217\42\224\1\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\1\326\16\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\10\13\1\327\6\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\3\13\1\330\13\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\10\13\1\331" +
                    "\6\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\17\13\6\0\1\13\1\332\2\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\11\13\1\333\5\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\6\13\1\334\10\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\335\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\17\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\336\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\17\13\6\0" +
                    "\4\13\3\0\1\13\6\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\11\13\1\337" +
                    "\5\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\1\340\16\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\11\13\1\341\5\13\6\0\4\13\3\0\1\13" +
                    "\5\0\23\264\1\265\1\264\1\342\1\266\66\264\1\265" +
                    "\2\264\1\266\3\264\1\343\37\264\23\220\1\221\2\220" +
                    "\1\222\4\220\1\344\36\220\1\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\13" +
                    "\1\345\15\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\7\13\1\346\7\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\5\13\1\347\11\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\10\13\1\350\6\13" +
                    "\6\0\4\13\3\0\1\13\6\0\2\13\5\0\1\13" +
                    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\5\13" +
                    "\1\351\11\13\6\0\4\13\3\0\1\13\6\0\2\13" +
                    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13" +
                    "\6\0\6\13\1\352\10\13\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\7\13\1\353\7\13\6\0\4\13" +
                    "\3\0\1\13\6\0\2\13\5\0\1\13\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\5\13\1\354\11\13" +
                    "\6\0\4\13\3\0\1\13\5\0\23\264\1\265\2\264" +
                    "\1\266\4\264\1\355\36\264\23\220\1\221\2\220\1\222" +
                    "\5\220\1\356\35\220\1\0\2\13\5\0\1\13\3\0" +
                    "\1\13\1\0\2\13\1\0\1\13\6\0\4\13\1\357" +
                    "\12\13\6\0\4\13\3\0\1\13\6\0\2\13\5\0" +
                    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0" +
                    "\4\13\1\360\12\13\6\0\4\13\3\0\1\13\6\0" +
                    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0" +
                    "\1\13\6\0\16\13\1\361\6\0\4\13\3\0\1\13" +
                    "\6\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13" +
                    "\1\0\1\13\6\0\1\13\1\362\15\13\6\0\4\13" +
                    "\3\0\1\13\5\0\23\264\1\265\2\264\1\266\5\264" +
                    "\1\363\35\264\23\220\1\221\2\220\1\222\6\220\1\364" +
                    "\34\220\1\0\2\13\5\0\1\365\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\17\13\6\0\4\13\3\0" +
                    "\1\13\6\0\2\13\5\0\1\13\3\0\1\13\1\0" +
                    "\2\13\1\0\1\13\6\0\11\13\1\366\5\13\6\0" +
                    "\4\13\3\0\1\13\5\0\23\264\1\265\2\264\1\266" +
                    "\6\264\1\367\34\264\10\220\1\272\12\220\1\221\2\220" +
                    "\1\222\43\220\1\0\2\13\5\0\1\370\3\0\1\13" +
                    "\1\0\2\13\1\0\1\13\6\0\17\13\6\0\4\13" +
                    "\3\0\1\13\5\0\10\264\1\323\12\264\1\265\2\264" +
                    "\1\266\43\264";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\1\6\0\1\11\5\1\1\11\7\1\1\11" +
                    "\1\1\1\11\16\1\2\11\2\1\2\11\3\1\5\11" +
                    "\1\1\1\11\1\1\1\11\3\1\2\11\3\1\1\11" +
                    "\3\1\1\11\5\1\2\0\1\11\3\1\1\11\10\1" +
                    "\5\0\26\1\3\11\3\1\2\11\1\0\2\1\2\0" +
                    "\1\1\1\0\10\1\2\0\1\11\2\0\1\1\3\0" +
                    "\35\1\3\0\1\1\3\0\1\1\2\0\25\1\1\0" +
                    "\1\1\2\0\15\1\2\0\10\1\2\0\4\1\2\0" +
                    "\2\1\1\0\1\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /* user code: */
    List<ScriptSource> searchDirectories;
    Stack<String> sourcenames;
    StringBuilder literal = new StringBuilder();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;
    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;
    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;
    private Stack zzStreams = new Stack();
    private String tmpname;
    private Reader tmpreader;

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
        sourcenames = new Stack<String>();
        sourcenames.push(sourcename);
        this.searchDirectories = searchDirectories;
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    Lexer(java.io.InputStream in, String sourcename, List<ScriptSource> searchDirectories) {
        this(new java.io.InputStreamReader(in), sourcename, searchDirectories);
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[248];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[248];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[9744];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[248];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 188) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    void addInclude(String name) throws FileNotFoundException {
        for (ScriptSource s : searchDirectories) {
            Reader r = s.read(name);
            if (r != null) {
                this.tmpreader = r;
                this.tmpname = name;
                return;
            }
        }
        throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
    }

    void commitInclude() {
        sourcenames.push(tmpname);
        yypushStream(tmpreader);
    }

    public final boolean yymoreStreams() {
        return !zzStreams.isEmpty();
    }

    public final void yypopStream() throws java.io.IOException {
        zzReader.close();
        ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
        zzBuffer = s.zzBuffer;
        zzReader = s.zzReader;
        zzEndRead = s.zzEndRead;
        zzStartRead = s.zzStartRead;
        zzCurrentPos = s.zzCurrentPos;
        zzMarkedPos = s.zzMarkedPos;
        zzAtEOF = s.zzAtEOF;
        zzEOFDone = s.zzEOFDone;
        yyline = s.yyline;
        yycolumn = s.yycolumn;
    }

    public final void yypushStream(Reader reader) {
        zzStreams.push(
                new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
        );
        zzAtEOF = false;
        zzBuffer = new char[ZZ_BUFFERSIZE];
        zzReader = reader;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yycolumn = 0;
    }

    LineInfo getLine() {
        return new LineInfo(yyline, yycolumn, sourcenames.peek());
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

    /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 16: {
                    return new OperatorToken(getLine(), OperatorTypes.ADDRESS);
                }
                case 89:
                    break;
                case 26: {
                    yypushback(1);
                    yybegin(YYINITIAL);
                    if (literal.length() == 1) {
                        return new CharacterToken(getLine(), literal.toString().charAt(0));
                        //return new CharacterToken(getLine(),literal.toString());
                    } else {
                        return new StringToken(getLine(), literal.toString());
                    }
                }
                case 90:
                    break;
                case 22: {
                    return new EndBracketToken(getLine());
                }
                case 91:
                    break;
                case 10: {
                    return new EndParenToken(getLine());
                }
                case 92:
                    break;
                case 35: {
                    return new GroupingExceptionToken(getLine(),
                            EnumeratedGroupingException.GroupingExceptionTypes.MISMATCHED_BRACKETS);
                }
                case 93:
                    break;
                case 33: {
                    literal.setLength(0);
                    yybegin(INCLUDE_DBL_QUOTE);
                }
                case 94:
                    break;
                case 72: {
                    return new TypeToken(getLine());
                }
                case 95:
                    break;
                case 78: {
                    return new UntilToken(getLine());
                }
                case 96:
                    break;
                case 2: {
                    return new GroupingExceptionToken(new StrayCharacterException(getLine(), yytext().charAt(0)));
                }
                case 97:
                    break;
                case 42: {
                    return new IfToken(getLine());
                }
                case 98:
                    break;
                case 60: {
                    return new OperatorToken(getLine(), OperatorTypes.AND);
                }
                case 99:
                    break;
                case 74: {
                    return new BooleanToken(getLine(), false);
                }
                case 100:
                    break;
                case 76: {
                    return new BreakToken(getLine());
                }
                case 101:
                    break;
                case 88: {
                    return new ProcedureToken(getLine());
                }
                case 102:
                    break;
                case 8: {
                    return new ParenthesizedToken(getLine());
                }
                case 103:
                    break;
                case 23: {
                    literal.setLength(0);
                    yybegin(STRING);
                }
                case 104:
                    break;
                case 58: {
                    return new OperatorToken(getLine(), OperatorTypes.NOT);
                }
                case 105:
                    break;
                case 81: {
                    return new DowntoToken(getLine());
                }
                case 106:
                    break;
                case 28: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.INCOMPLETE_CHAR);
                }
                case 107:
                    break;
                case 63: {
                    return new OperatorToken(getLine(), OperatorTypes.SHIFTRIGHT);
                }
                case 108:
                    break;
                case 30: {
                    try {
                        addInclude(yytext());
                    } catch (FileNotFoundException e) {
                        EnumeratedGroupingException t = new EnumeratedGroupingException(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                        t.caused = e;
                        return new GroupingExceptionToken(t);
                    }
                    yybegin(END_INCLUDE);
                }
                case 109:
                    break;
                case 49: {
                    return new OperatorToken(getLine(), OperatorTypes.NOTEQUAL);
                }
                case 110:
                    break;
                case 19: {
                    return new CommaToken(getLine());
                }
                case 111:
                    break;
                case 24: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.NEWLINE_IN_QUOTES);
                }
                case 112:
                    break;
                case 20: {
                    return new SemicolonToken(getLine());
                }
                case 113:
                    break;
                case 55: {
                    return new ForToken(getLine());
                }
                case 114:
                    break;
                case 79: {
                    return new ArrayToken(getLine());
                }
                case 115:
                    break;
                case 13: {
                    return new OperatorToken(getLine(), OperatorTypes.PLUS);
                }
                case 116:
                    break;
                case 51: {
                    return new AssignmentToken(getLine());
                }
                case 117:
                    break;
                case 25: {
                    yybegin(STRINGDONE);
                }
                case 118:
                    break;
                case 14: {
                    return new OperatorToken(getLine(), OperatorTypes.LESSTHAN);
                }
                case 119:
                    break;
                case 32: {
                    literal.setLength(0);
                    yybegin(INCLUDE_SNGL_QUOTE);
                }
                case 120:
                    break;
                case 61: {
                    return new OperatorToken(getLine(), OperatorTypes.XOR);
                }
                case 121:
                    break;
                case 56: {
                    return new CommentToken(getLine(), yytext());
                }
                case 122:
                    break;
                case 7: {
                    return new PeriodToken(getLine());
                }
                case 123:
                    break;
                case 4: {
                    return new WordToken(getLine(), yytext());
                }
                case 124:
                    break;
                case 15: {
                    return new OperatorToken(getLine(), OperatorTypes.GREATERTHAN);
                }
                case 125:
                    break;
                case 54: {
                    return new EndToken(getLine());
                }
                case 126:
                    break;
                case 48: {
                    return new OperatorToken(getLine(), OperatorTypes.LESSEQ);
                }
                case 127:
                    break;
                case 87: {
                    return new ContinueToken(getLine());
                }
                case 128:
                    break;
                case 70: {
                    return new BooleanToken(getLine(), true);
                }
                case 129:
                    break;
                case 39: {
                    return new DotDotToken(getLine());
                }
                case 130:
                    break;
                case 86: {
                    return new FunctionToken(getLine());
                }
                case 131:
                    break;
                case 1: {
                    literal.append(yytext());
                }
                case 132:
                    break;
                case 68: {
                    return new CaseToken(getLine());
                }
                case 133:
                    break;
                case 71: {
                    return new ThenToken(getLine());
                }
                case 134:
                    break;
                case 43: {
                    return new OperatorToken(getLine(), OperatorTypes.IN);
                }
                case 135:
                    break;
                case 77: {
                    return new ConstToken(getLine());
                }
                case 136:
                    break;
                case 46: {
                    return new OperatorToken(getLine(), OperatorTypes.OR);
                }
                case 137:
                    break;
                case 67: {
                    yybegin(INCLUDE);
                }
                case 138:
                    break;
                case 85: {
                    return new ProgramToken(getLine());
                }
                case 139:
                    break;
                case 6: {
                    return new OperatorToken(getLine(), OperatorTypes.MINUS);
                }
                case 140:
                    break;
                case 38: {
                    return new CharacterToken(getLine(), yytext());
                }
                case 141:
                    break;
                case 9: {
                    return new OperatorToken(getLine(), OperatorTypes.MULTIPLY);
                }
                case 142:
                    break;
                case 45: {
                    return new OfToken(getLine());
                }
                case 143:
                    break;
                case 37: {
                    return new IntegerToken(getLine(), (int) Long.parseLong(yytext(), 2));
                }
                case 144:
                    break;
                case 57: {
                    return new WarningToken(getLine(), "Warning! Unrecognized Compiler Directive!");
                }
                case 145:
                    break;
                case 27: {
                    yybegin(STRING);
                }
                case 146:
                    break;
                case 50: {
                    return new OperatorToken(getLine(), OperatorTypes.GREATEREQ);
                }
                case 147:
                    break;
                case 64: {
                    return new VarToken(getLine());
                }
                case 148:
                    break;
                case 21: {
                    return new BracketedToken(getLine());
                }
                case 149:
                    break;
                case 11: {
                    return new OperatorToken(getLine(), OperatorTypes.DIVIDE);
                }
                case 150:
                    break;
                case 47: {
                    return new ToToken(getLine());
                }
                case 151:
                    break;
                case 40: {
                    return new IntegerToken(getLine(), (int) Long.parseLong(yytext(), 16));
                }
                case 152:
                    break;
                case 84: {
                    return new ForwardToken(getLine());
                }
                case 153:
                    break;
                case 75: {
                    return new BeginEndToken(getLine());
                }
                case 154:
                    break;
                case 44: {
                    return new DoToken(getLine());
                }
                case 155:
                    break;
                case 18: {
                    return new ColonToken(getLine());
                }
                case 156:
                    break;
                case 41: {
                    return new IntegerToken(getLine(), (int) Long.parseLong(yytext(), 8));
                }
                case 157:
                    break;
                case 53: {
                    literal.append('\"');
                }
                case 158:
                    break;
                case 3: {
                    return new DoubleToken(getLine(), Double.parseDouble(yytext()));
                }
                case 159:
                    break;
                case 73: {
                    return new WithToken(getLine());
                }
                case 160:
                    break;
                case 66: {
                    return new ElseToken(getLine());
                }
                case 161:
                    break;
                case 29: {
                    literal.append((char) Integer.parseInt(yytext()));
                    yybegin(STRINGDONE);
                }
                case 162:
                    break;
                case 69: {
                    return new UsesToken(getLine());
                }
                case 163:
                    break;
                case 82: {
                    return new RecordToken(getLine());
                }
                case 164:
                    break;
                case 80: {
                    return new WhileToken(getLine());
                }
                case 165:
                    break;
                case 17: {
                    return new OperatorToken(getLine(), OperatorTypes.DEREF);
                }
                case 166:
                    break;
                case 59: {
                    return new OperatorToken(getLine(), OperatorTypes.DIV);
                }
                case 167:
                    break;
                case 12: {
                    return new OperatorToken(getLine(), OperatorTypes.EQUALS);
                }
                case 168:
                    break;
                case 62: {
                    return new OperatorToken(getLine(), OperatorTypes.SHIFTLEFT);
                }
                case 169:
                    break;
                case 83: {
                    return new RepeatToken(getLine());
                }
                case 170:
                    break;
                case 65: {
                    return new OperatorToken(getLine(), OperatorTypes.MOD);
                }
                case 171:
                    break;
                case 34: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.IO_EXCEPTION);
                }
                case 172:
                    break;
                case 36: {
                    yybegin(YYINITIAL);
                    commitInclude();
                }
                case 173:
                    break;
                case 31: {
                    return new GroupingExceptionToken(getLine(), EnumeratedGroupingException.GroupingExceptionTypes.MISSING_INCLUDE);
                }
                case 174:
                    break;
                case 52: {
                    literal.append('\'');
                }
                case 175:
                    break;
                case 5: {
                }
                case 176:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            if (!yymoreStreams()) {
                                return new EOFToken(getLine());
                            }
                            sourcenames.pop();
                            yypopStream();
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
