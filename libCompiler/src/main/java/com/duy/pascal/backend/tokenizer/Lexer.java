/* The following code was generated by JFlex 1.4.3 on 6/13/17 3:42 PM */

package com.duy.pascal.backend.tokenizer;

import com.duy.pascal.backend.parse_exception.grouping.GroupingException;
import com.duy.pascal.backend.parse_exception.grouping.StrayCharacterException;
import com.duy.pascal.backend.linenumber.LineInfo;
import com.duy.pascal.backend.tokens.EOFToken;
import com.duy.pascal.backend.tokens.ignore.GroupingExceptionToken;
import com.duy.pascal.backend.tokens.OperatorToken;
import com.duy.pascal.backend.types.OperatorTypes;
import com.duy.pascal.backend.tokens.Token;
import com.duy.pascal.backend.tokens.ignore.CompileDirectiveToken;
import com.duy.pascal.backend.tokens.WordToken;
import com.duy.pascal.backend.tokens.basic.ArrayToken;
import com.duy.pascal.backend.tokens.basic.AssignmentToken;
import com.duy.pascal.backend.tokens.basic.ColonToken;
import com.duy.pascal.backend.tokens.basic.CommaToken;
import com.duy.pascal.backend.tokens.basic.ConstToken;
import com.duy.pascal.backend.tokens.basic.DoToken;
import com.duy.pascal.backend.tokens.basic.DotDotToken;
import com.duy.pascal.backend.tokens.basic.DowntoToken;
import com.duy.pascal.backend.tokens.basic.ElseToken;
import com.duy.pascal.backend.tokens.basic.ForToken;
import com.duy.pascal.backend.tokens.basic.ForwardToken;
import com.duy.pascal.backend.tokens.basic.FunctionToken;
import com.duy.pascal.backend.tokens.basic.IfToken;
import com.duy.pascal.backend.tokens.basic.OfToken;
import com.duy.pascal.backend.tokens.basic.PeriodToken;
import com.duy.pascal.backend.tokens.basic.ProcedureToken;
import com.duy.pascal.backend.tokens.basic.ProgramToken;
import com.duy.pascal.backend.tokens.basic.RepeatToken;
import com.duy.pascal.backend.tokens.basic.SemicolonToken;
import com.duy.pascal.backend.tokens.basic.ThenToken;
import com.duy.pascal.backend.tokens.basic.ToToken;
import com.duy.pascal.backend.tokens.basic.TypeToken;
import com.duy.pascal.backend.tokens.basic.UntilToken;
import com.duy.pascal.backend.tokens.basic.VarToken;
import com.duy.pascal.backend.tokens.basic.WhileToken;
import com.duy.pascal.backend.tokens.basic.PlusAssignToken;
import com.duy.pascal.backend.tokens.basic.MinusAssignToken;
import com.duy.pascal.backend.tokens.basic.DivAssignToken;
import com.duy.pascal.backend.tokens.basic.MultiplyAssignToken;
import com.duy.pascal.backend.tokens.closing.EndBracketToken;
import com.duy.pascal.backend.tokens.closing.EndParenToken;
import com.duy.pascal.backend.tokens.closing.EndToken;
import com.duy.pascal.backend.tokens.grouping.BeginEndToken;
import com.duy.pascal.backend.tokens.grouping.BracketedToken;
import com.duy.pascal.backend.tokens.grouping.CaseToken;
import com.duy.pascal.backend.tokens.grouping.ParenthesizedToken;
import com.duy.pascal.backend.tokens.grouping.RecordToken;
import com.duy.pascal.backend.tokens.value.BooleanToken;
import com.duy.pascal.backend.tokens.value.CharacterToken;
import com.duy.pascal.backend.tokens.value.DoubleToken;
import com.duy.pascal.backend.tokens.value.IntegerToken;
import com.duy.pascal.backend.tokens.value.BinaryToken;
import com.duy.pascal.backend.tokens.value.HexToken;
import com.duy.pascal.backend.tokens.value.OctalToken;
import com.duy.pascal.backend.tokens.value.StringToken;
import com.duy.pascal.backend.source_include.ScriptSource;
import com.duy.pascal.backend.tokens.basic.UsesToken;
import com.duy.pascal.backend.tokens.basic.BreakToken;
import com.duy.pascal.backend.tokens.basic.ContinueToken;
import com.duy.pascal.backend.tokens.basic.WithToken;
import com.duy.pascal.backend.tokens.basic.InterfaceToken;
import com.duy.pascal.backend.tokens.basic.InitializationToken;
import com.duy.pascal.backend.tokens.basic.ImplementationToken;
import com.duy.pascal.backend.tokens.basic.FinalizationToken;
import com.duy.pascal.backend.tokens.basic.SetToken;
import com.duy.pascal.backend.tokens.grouping.UnitToken;
import com.duy.pascal.backend.tokens.ignore.CommentToken;

import java.io.FileNotFoundException;
import java.io.Reader;
import java.util.List;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/13/17 3:42 PM from the specification file
 * <tt>C:/github/pascalnide/libCompiler/src/main/java/com/duy/pascal/backend/tokenizer/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRINGDONE = 4;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int STRINGPOUND = 6;
  public static final int INCLUDE_SNGL_QUOTE = 12;
  public static final int INCLUDE = 8;
  public static final int END_INCLUDE = 14;
  public static final int INCLUDE_DBL_QUOTE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\2\0\1\5\22\0\1\72\1\0\1\71\1\3"+
    "\1\13\1\15\1\20\1\70\1\22\1\25\1\23\1\54\1\56\1\11"+
    "\1\12\1\27\2\16\6\21\2\1\1\55\1\57\1\45\1\51\1\46"+
    "\1\0\1\52\1\36\1\17\1\32\1\35\1\10\1\14\1\65\1\44"+
    "\1\30\1\2\1\66\1\33\1\50\1\31\1\37\1\64\1\2\1\41"+
    "\1\43\1\40\1\34\1\47\1\62\1\42\1\63\1\67\1\60\1\0"+
    "\1\61\1\53\1\2\1\0\1\36\1\17\1\32\1\35\1\10\1\14"+
    "\1\65\1\44\1\30\1\2\1\66\1\33\1\50\1\31\1\37\1\64"+
    "\1\2\1\41\1\43\1\40\1\34\1\47\1\62\1\42\1\63\1\67"+
    "\1\24\1\7\1\26\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\0\1\2\1\3\1\4\1\2\1\5"+
    "\1\4\1\6\1\7\1\2\1\4\1\2\1\4\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\14\4\1\15\1\16"+
    "\2\4\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\3\4\1\30\1\1\1\31\1\32\2\33"+
    "\1\12\1\33\1\34\1\35\1\36\1\37\1\5\1\40"+
    "\1\41\1\42\1\1\1\43\1\44\1\45\1\46\2\47"+
    "\1\50\1\3\2\0\1\51\1\52\2\4\1\53\1\54"+
    "\1\55\4\4\1\51\2\4\1\56\1\12\1\57\2\12"+
    "\2\0\1\60\1\61\1\62\10\4\1\63\2\4\1\64"+
    "\1\65\1\66\7\4\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\2\4\1\75\1\76\4\4\1\77\1\12\1\36"+
    "\1\100\1\77\2\0\1\3\1\101\1\0\1\101\1\102"+
    "\4\4\1\103\2\4\4\12\1\104\1\12\2\0\1\12"+
    "\3\4\1\105\6\4\1\106\1\4\1\107\6\4\1\110"+
    "\1\111\1\67\1\73\1\112\1\113\4\4\1\36\1\3"+
    "\1\114\6\4\2\12\1\104\1\12\2\0\1\115\1\12"+
    "\1\0\3\4\1\116\3\4\1\117\1\4\1\120\2\4"+
    "\1\121\1\122\1\123\2\4\1\124\3\4\1\36\1\3"+
    "\2\4\1\125\1\4\1\126\1\127\1\12\1\115\2\12"+
    "\4\4\1\130\1\131\1\4\1\132\2\4\1\133\2\4"+
    "\1\36\1\3\3\4\3\12\4\4\1\134\1\135\1\136"+
    "\2\4\1\36\1\3\2\4\1\137\2\12\5\4\1\140"+
    "\1\36\1\3\1\4\1\141\2\12\3\4\1\142\1\4"+
    "\1\36\1\3\1\4\1\12\1\4\1\143\1\4\1\144"+
    "\1\36\1\3\3\4\1\36\1\3\3\4\1\36\1\3"+
    "\1\145\2\4\1\36\1\3\2\4\1\36\1\3\1\146"+
    "\1\147\1\36\1\3\1\36\1\3\1\36\1\3\1\36"+
    "\1\3\1\36\1\3\1\36\1\3\1\36\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u01d8\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u01d8\0\u01d8\0\u01d8\0\u0973\0\u09ae\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u09e9\0\u0a24\0\u0a5f\0\u01d8\0\u0a9a"+
    "\0\u01d8\0\u0ad5\0\u01d8\0\u0b10\0\u0b4b\0\u0b86\0\u01d8\0\u01d8"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u01d8\0\u0bfc\0\u0bfc\0\u0c72\0\u01d8"+
    "\0\u0cad\0\u01d8\0\u0ce8\0\u0d23\0\u0d5e\0\u0d23\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u01d8\0\u0289\0\u0e4a\0\u0e85\0\u01d8\0\u01d8\0\u03b0"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0426\0\u0fac\0\u0fe7\0\u049c"+
    "\0\u1022\0\u01d8\0\u105d\0\u01d8\0\u1098\0\u10d3\0\u01d8\0\u024e"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u024e\0\u024e\0\u024e\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u01d8\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u156f\0\u15aa\0\u01d8\0\u01d8"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u01d8\0\u16d1\0\u170c\0\u0c72"+
    "\0\u0c72\0\u0d23\0\u0d5e\0\u1747\0\u1782\0\u1782\0\u17bd\0\u024e"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u024e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u024e\0\u1dbb\0\u024e\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u024e\0\u024e\0\u024e\0\u024e\0\u024e"+
    "\0\u024e\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u024e"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u221c\0\u2292\0\u1a81\0\u22cd\0\u1a0b\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u024e\0\u242f\0\u246a\0\u24a5\0\u024e\0\u24e0"+
    "\0\u024e\0\u251b\0\u2556\0\u024e\0\u024e\0\u024e\0\u2591\0\u25cc"+
    "\0\u024e\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\u024e\0\u27a4\0\u024e\0\u024e\0\u27df\0\u221c\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u024e\0\u024e\0\u297c\0\u024e"+
    "\0\u29b7\0\u29f2\0\u024e\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u1a81\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6"+
    "\0\u2cf1\0\u024e\0\u024e\0\u024e\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u024e\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u024e\0\u302b\0\u3066\0\u30a1\0\u024e\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u024e\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u024e\0\u3365\0\u024e\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u024e\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750"+
    "\0\u378b\0\u37c6\0\u3801\0\u024e\0\u024e\0\u383c\0\u3877\0\u38b2"+
    "\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a"+
    "\0\u3ac5\0\u01d8\0\u3ac5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\3\15\1\11\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\12\1\24\1\25\1\12"+
    "\1\26\1\27\1\30\1\31\1\11\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\13\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\13\1\65\1\66\2\13\1\67\1\11\1\15"+
    "\5\70\2\71\61\70\1\72\2\70\4\73\3\15\13\73"+
    "\1\74\1\73\1\75\2\73\1\76\40\73\1\77\1\73"+
    "\1\15\1\100\1\101\14\100\1\101\2\100\1\101\51\100"+
    "\4\102\1\103\2\15\14\102\1\104\1\102\2\104\41\102"+
    "\1\105\1\106\1\15\5\107\2\110\62\107\1\111\6\107"+
    "\2\112\61\107\1\113\2\107\23\114\1\115\2\114\1\116"+
    "\44\114\74\0\1\117\6\0\1\120\1\0\1\121\3\0"+
    "\1\117\1\122\1\0\1\117\52\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\15\13"+
    "\2\0\2\13\11\0\6\13\4\0\1\123\14\0\1\123"+
    "\2\0\1\123\55\0\3\15\63\0\1\15\1\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\1\13\1\124\1\13\1\125\11\13\2\0\2\13"+
    "\11\0\6\13\54\0\1\126\33\0\1\127\61\0\1\130"+
    "\6\0\1\130\3\0\1\130\1\0\2\130\1\0\1\130"+
    "\10\0\1\130\2\0\2\130\35\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\131"+
    "\3\13\1\132\1\13\1\133\1\134\5\13\2\0\2\13"+
    "\11\0\6\13\21\0\1\135\55\0\2\13\5\0\1\136"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\11\13"+
    "\1\137\3\13\2\0\2\13\11\0\6\13\21\0\1\140"+
    "\2\0\1\140\74\0\1\141\120\0\1\142\21\0\13\75"+
    "\1\143\12\75\1\144\44\75\23\0\1\145\3\0\1\146"+
    "\21\0\1\147\22\0\2\13\5\0\1\13\3\0\1\150"+
    "\1\0\2\13\1\0\1\13\6\0\1\13\1\151\13\13"+
    "\2\0\1\13\1\152\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\7\13\1\153\5\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\6\13\1\154\1\155\5\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\6\13\1\156\6\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\13"+
    "\1\157\11\13\1\160\1\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\1\161\6\13\1\162\5\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\163"+
    "\7\13\1\164\3\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\165\1\0\2\13\1\0"+
    "\1\13\6\0\11\13\1\166\3\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\7\13\1\167\1\13\1\170"+
    "\2\13\1\171\2\0\2\13\11\0\1\13\1\172\4\13"+
    "\4\0\2\13\5\0\1\173\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\15\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\7\13\1\174\5\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\175\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\14\13\1\176\2\0"+
    "\2\13\11\0\6\13\50\0\1\177\1\200\2\0\1\201"+
    "\66\0\1\202\1\203\2\0\1\204\22\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\6\13\1\205\6\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\7\13\1\206\5\13\2\0\2\13\11\0"+
    "\6\13\54\0\1\207\72\0\1\210\22\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\211\13\13\1\212\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\11\13\1\213\3\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\7\13\1\214\5\13\2\0"+
    "\2\13\11\0\6\13\3\0\5\70\2\0\61\70\1\0"+
    "\2\70\70\0\1\215\25\0\1\216\47\0\26\75\1\144"+
    "\44\75\23\0\1\145\3\0\1\146\44\0\1\217\14\0"+
    "\1\217\2\0\1\217\51\0\5\102\2\0\14\102\1\0"+
    "\1\102\2\0\43\102\1\0\4\102\1\103\2\15\14\102"+
    "\1\0\1\102\2\0\43\102\1\15\5\107\2\0\71\107"+
    "\2\0\62\107\1\220\6\107\2\0\61\107\1\221\2\107"+
    "\23\222\1\223\2\222\1\116\71\222\2\0\44\222\1\0"+
    "\1\224\6\0\1\120\1\0\1\121\3\0\1\224\2\0"+
    "\1\224\52\0\1\225\7\0\1\226\4\0\1\225\2\0"+
    "\1\225\32\0\1\226\17\0\1\227\14\0\1\227\2\0"+
    "\1\227\52\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\5\13\1\230\7\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\13\13\1\231"+
    "\1\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\13\1\232\13\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\1\13\1\233\13\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\3\13\1\234\11\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\11\13\1\235"+
    "\3\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\15\13\2\0\2\13\11\0\3\13\1\236\2\13\4\0"+
    "\2\13\5\0\1\237\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\15\13\2\0\2\13\11\0\6\13\3\0"+
    "\13\216\1\240\7\216\1\241\47\216\23\242\1\243\2\242"+
    "\1\244\1\242\1\245\42\242\23\246\1\247\47\246\5\146"+
    "\1\250\1\144\1\0\63\146\1\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\251"+
    "\7\13\1\252\4\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\15\13\2\0\2\13\11\0\2\13\1\253"+
    "\3\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\10\13\1\254\4\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\13\13\1\255"+
    "\1\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\13\1\256\13\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\1\13\1\257"+
    "\1\0\1\13\6\0\15\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\1\260\7\13\1\261\4\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\262\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\1\263\1\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\15\13"+
    "\2\0\2\13\11\0\1\264\5\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\5\13\1\265\7\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\11\13\1\266\3\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\4\13\1\267\10\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\270\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\2\13\11\0\2\13\1\271\3\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\2\13\1\272\12\13\2\0\2\13\11\0\2\13\1\273"+
    "\3\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\11\13\1\274\3\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\10\13\1\275"+
    "\4\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\3\13\1\276\5\13\1\277\3\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\11\13\1\300\3\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\5\13\1\301"+
    "\7\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\10\13\1\302\4\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\1\303\14\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\7\13\1\304\5\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\10\13\1\305\4\13"+
    "\2\0\2\13\11\0\6\13\3\0\23\216\1\241\47\216"+
    "\1\0\1\306\14\0\1\306\2\0\1\306\52\0\1\307"+
    "\6\0\1\120\1\0\1\121\3\0\1\307\2\0\1\307"+
    "\52\0\1\225\14\0\1\225\2\0\1\225\52\0\1\227"+
    "\6\0\1\120\5\0\1\227\2\0\1\227\52\0\2\13"+
    "\5\0\1\310\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\15\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\6\13\1\311\6\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\2\13\1\312\12\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\13\13\1\313\1\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\15\13"+
    "\2\0\2\13\11\0\1\314\5\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\315\14\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\6\13\1\316\6\13\2\0\2\13\11\0\6\13"+
    "\3\0\23\317\1\320\2\317\1\321\1\317\1\322\42\317"+
    "\23\216\1\241\1\216\1\144\45\216\23\242\1\243\2\242"+
    "\1\244\71\242\1\75\1\144\44\242\23\323\1\324\2\323"+
    "\1\244\44\323\4\242\1\325\16\242\1\243\2\242\1\244"+
    "\2\242\1\326\40\242\1\325\23\246\1\327\47\246\23\0"+
    "\1\247\3\0\1\144\51\0\1\144\65\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\10\13\1\330\4\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\331\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\15\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\3\13\1\332\11\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\333\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\15\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\10\13\1\334\2\13\1\335"+
    "\1\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\3\13\1\336\11\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\10\13\1\337\4\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\340\14\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\13\13\1\341\1\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\13"+
    "\1\342\13\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\6\13\1\343\6\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\344\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\15\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\1\13\1\345\13\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\346\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\15\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\7\13\1\347\5\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\350"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\15\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\14\13"+
    "\1\351\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\3\13\1\352\11\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\2\13\1\353\12\13\2\0\2\13\11\0"+
    "\3\13\1\354\2\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\7\13\1\275"+
    "\5\13\2\0\2\13\11\0\6\13\4\0\1\355\14\0"+
    "\1\355\2\0\1\355\52\0\1\356\6\0\1\120\1\0"+
    "\1\121\3\0\1\356\2\0\1\356\52\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\3\13\1\357\11\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\10\13\1\360\4\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\361\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\15\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\6\13\1\362\6\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\363"+
    "\13\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\15\13\2\0\2\13\11\0\4\13\1\364\1\13\3\0"+
    "\23\317\1\320\2\317\1\321\67\317\1\365\1\317\1\144"+
    "\1\216\50\317\1\366\16\317\1\320\2\317\1\321\2\317"+
    "\1\367\40\317\1\366\25\323\2\0\44\323\23\242\1\243"+
    "\2\242\1\244\3\242\1\370\40\242\23\246\1\327\3\246"+
    "\1\144\43\246\1\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\1\371\14\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\11\13\1\372"+
    "\3\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\373\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\15\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\374\14\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\10\13\1\375\4\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\275\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\15\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\3\13\1\376\11\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\10\13\1\377\4\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\15\13"+
    "\2\0\2\13\11\0\1\13\1\u0100\4\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\11\13\1\u0101\3\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\6\13\1\u0102\6\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\u0103\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\15\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\u0104\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\15\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\11\13\1\u0105\3\13"+
    "\2\0\2\13\11\0\6\13\4\0\1\u0106\14\0\1\u0106"+
    "\2\0\1\u0106\52\0\1\u0107\6\0\1\120\1\0\1\121"+
    "\3\0\1\u0107\2\0\1\u0107\52\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\u0108"+
    "\14\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\1\u0109\14\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\11\13\1\u010a\3\13\2\0\2\13\11\0\6\13"+
    "\3\0\23\317\1\320\1\317\1\u010b\1\321\67\317\1\320"+
    "\2\317\1\321\3\317\1\u010c\40\317\23\242\1\243\2\242"+
    "\1\244\4\242\1\u010d\37\242\1\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\6\13"+
    "\1\u010e\6\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\u010f\1\0\2\13\1\0\1\13"+
    "\6\0\15\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\15\13\2\0\1\13\1\u0110\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\1\13\1\u0111\13\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\7\13\1\u0112\5\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\5\13\1\u0113"+
    "\7\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\10\13\1\u0114\4\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\5\13\1\u0115\7\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\6\13\1\u0116\6\13\2\0"+
    "\2\13\11\0\6\13\4\0\1\u0117\14\0\1\u0117\2\0"+
    "\1\u0117\52\0\1\u0118\6\0\1\120\1\0\1\121\3\0"+
    "\1\u0118\2\0\1\u0118\52\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\2\13\11\0\5\13\1\u0119\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\7\13"+
    "\1\u011a\5\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\5\13\1\u011b\7\13\2\0\2\13\11\0\6\13"+
    "\3\0\23\317\1\320\2\317\1\321\4\317\1\u011c\37\317"+
    "\23\242\1\243\2\242\1\244\5\242\1\u011d\36\242\1\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\3\13\1\u011e\11\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\6\13\1\u011f\6\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\u0120\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\4\13\1\u0121"+
    "\10\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\4\13\1\u0122\10\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\15\13\2\0\1\13\1\u0123\11\0\6\13"+
    "\4\0\1\u0124\14\0\1\u0124\2\0\1\u0124\52\0\1\u0125"+
    "\6\0\1\120\1\0\1\121\3\0\1\u0125\2\0\1\u0125"+
    "\52\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\6\13\1\u0126\6\13\2\0\2\13"+
    "\11\0\6\13\4\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\1\13\1\u0127\13\13"+
    "\2\0\2\13\11\0\6\13\3\0\23\317\1\320\2\317"+
    "\1\321\5\317\1\u0128\36\317\23\242\1\243\2\242\1\244"+
    "\6\242\1\u0129\35\242\1\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\u012a\14\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\2\13"+
    "\1\u012b\12\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\1\13\1\u012c\13\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\u012d\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\15\13\2\0\2\13\11\0\6\13"+
    "\4\0\2\13\5\0\1\13\3\0\1\13\1\0\2\13"+
    "\1\0\1\13\6\0\11\13\1\u012e\3\13\2\0\2\13"+
    "\11\0\6\13\4\0\1\u012f\14\0\1\u012f\2\0\1\u012f"+
    "\52\0\1\u0130\6\0\1\120\1\0\1\121\3\0\1\u0130"+
    "\2\0\1\u0130\52\0\2\13\5\0\1\13\3\0\1\13"+
    "\1\0\2\13\1\0\1\13\6\0\10\13\1\u0131\4\13"+
    "\2\0\2\13\11\0\6\13\3\0\23\317\1\320\2\317"+
    "\1\321\6\317\1\u0132\35\317\10\242\1\325\12\242\1\243"+
    "\2\242\1\244\44\242\1\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\15\13\2\0"+
    "\2\13\11\0\5\13\1\u0133\4\0\2\13\5\0\1\u0134"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\15\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\10\13"+
    "\1\u0135\4\13\2\0\2\13\11\0\6\13\4\0\2\13"+
    "\5\0\1\u0136\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\15\13\2\0\2\13\11\0\6\13\4\0\1\u0137"+
    "\14\0\1\u0137\2\0\1\u0137\52\0\1\u0138\6\0\1\120"+
    "\1\0\1\121\3\0\1\u0138\2\0\1\u0138\52\0\2\13"+
    "\5\0\1\13\3\0\1\13\1\0\2\13\1\0\1\13"+
    "\6\0\1\u0139\14\13\2\0\2\13\11\0\6\13\3\0"+
    "\10\317\1\366\12\317\1\320\2\317\1\321\44\317\1\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\6\13\1\u013a\6\13\2\0\2\13\11\0"+
    "\6\13\4\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\6\13\1\u013b\6\13\2\0"+
    "\2\13\11\0\6\13\4\0\1\u013c\14\0\1\u013c\2\0"+
    "\1\u013c\52\0\1\u013d\6\0\1\120\1\0\1\121\3\0"+
    "\1\u013d\2\0\1\u013d\52\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\7\13\1\u013e"+
    "\5\13\2\0\2\13\11\0\6\13\4\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\10\13\1\u013f\4\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\10\13\1\u0140\4\13\2\0\2\13\11\0"+
    "\6\13\4\0\1\u0141\14\0\1\u0141\2\0\1\u0141\52\0"+
    "\1\u0142\6\0\1\120\1\0\1\121\3\0\1\u0142\2\0"+
    "\1\u0142\52\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\13\1\u0143\13\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\u0144\14\13"+
    "\2\0\2\13\11\0\6\13\4\0\2\13\5\0\1\13"+
    "\3\0\1\13\1\0\2\13\1\0\1\13\6\0\1\u0145"+
    "\14\13\2\0\2\13\11\0\6\13\4\0\1\u0146\14\0"+
    "\1\u0146\2\0\1\u0146\52\0\1\u0147\6\0\1\120\1\0"+
    "\1\121\3\0\1\u0147\2\0\1\u0147\52\0\2\13\5\0"+
    "\1\13\3\0\1\13\1\0\2\13\1\0\1\13\6\0"+
    "\7\13\1\u0148\5\13\2\0\2\13\11\0\6\13\4\0"+
    "\2\13\5\0\1\13\3\0\1\13\1\0\2\13\1\0"+
    "\1\13\6\0\7\13\1\u0149\5\13\2\0\2\13\11\0"+
    "\6\13\4\0\1\u014a\14\0\1\u014a\2\0\1\u014a\52\0"+
    "\1\u014b\6\0\1\120\1\0\1\121\3\0\1\u014b\2\0"+
    "\1\u014b\52\0\2\13\5\0\1\13\3\0\1\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\13\1\u014c\13\13\2\0"+
    "\2\13\11\0\6\13\4\0\2\13\5\0\1\13\3\0"+
    "\1\13\1\0\2\13\1\0\1\13\6\0\1\13\1\u014d"+
    "\13\13\2\0\2\13\11\0\6\13\4\0\1\u014e\14\0"+
    "\1\u014e\2\0\1\u014e\52\0\1\u014f\6\0\1\120\1\0"+
    "\1\121\3\0\1\u014f\2\0\1\u014f\52\0\1\u0150\14\0"+
    "\1\u0150\2\0\1\u0150\52\0\1\u0151\6\0\1\120\1\0"+
    "\1\121\3\0\1\u0151\2\0\1\u0151\52\0\1\u0152\14\0"+
    "\1\u0152\2\0\1\u0152\52\0\1\u0153\6\0\1\120\1\0"+
    "\1\121\3\0\1\u0153\2\0\1\u0153\52\0\1\u0154\14\0"+
    "\1\u0154\2\0\1\u0154\52\0\1\u0155\6\0\1\120\1\0"+
    "\1\121\3\0\1\u0155\2\0\1\u0155\52\0\1\u0156\14\0"+
    "\1\u0156\2\0\1\u0156\52\0\1\u0157\6\0\1\120\1\0"+
    "\1\121\3\0\1\u0157\2\0\1\u0157\52\0\1\u0158\14\0"+
    "\1\u0158\2\0\1\u0158\52\0\1\u0159\6\0\1\120\1\0"+
    "\1\121\3\0\1\u0159\2\0\1\u0159\52\0\1\u015a\14\0"+
    "\1\u015a\2\0\1\u015a\52\0\1\u015b\6\0\1\120\1\0"+
    "\1\121\3\0\1\u015b\2\0\1\u015b\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\1\11\17\1\1\11\21\1\3\11"+
    "\2\1\4\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\3\1\1\11\3\1\1\11\1\1\1\11"+
    "\5\1\2\0\1\11\3\1\2\11\12\1\1\11\1\1"+
    "\1\11\2\0\1\11\27\1\6\11\2\1\2\11\4\1"+
    "\1\11\4\1\2\0\2\1\1\0\17\1\2\0\53\1"+
    "\2\0\2\1\1\0\202\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	List<ScriptSource> searchDirectories;
	Stack<String> sourcenames;
	
	StringBuilder literal=new StringBuilder();
    private Stack zzStreams = new Stack();
	private String tmpname;
	private Reader tmpreader;
		void addInclude(String name) throws FileNotFoundException {
    		for (ScriptSource s : searchDirectories) {
    			Reader r = s.read(name);
    			if (r != null) {
    				this.tmpreader=r;
    				this.tmpname=name;
    				return;
    			}
    		}
    		throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
    	}

	void commitInclude() {
		sourcenames.push(tmpname);
		yypushStream(tmpreader);
	}

    public final boolean yymoreStreams() {
        return !zzStreams.isEmpty();
    }

	public final void yypopStream() throws java.io.IOException {
            zzReader.close();
            ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
            zzBuffer = s.zzBuffer;
            zzReader = s.zzReader;
            zzEndRead = s.zzEndRead;
            zzStartRead = s.zzStartRead;
            zzCurrentPos = s.zzCurrentPos;
            zzMarkedPos = s.zzMarkedPos;
            zzAtEOF = s.zzAtEOF;
            zzEOFDone = s.zzEOFDone;
            yyline = s.yyline;
            yycolumn = s.yycolumn;
    }

    public final void yypushStream(Reader reader) {
            zzStreams.push(
                    new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                            zzMarkedPos, zzBuffer, zzAtEOF,
                            yyline, yycolumn)
            );
            zzAtEOF = false;
            zzBuffer = new char[ZZ_BUFFERSIZE];
            zzReader = reader;
            zzEndRead = zzStartRead = 0;
            zzCurrentPos = zzMarkedPos = 0;
            yyline = yycolumn = 0;
    }

	LineInfo getLine() {
		return new LineInfo(yyline,yycolumn,sourcenames.peek());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
  		sourcenames=new Stack<String>();
		sourcenames.push(sourcename);
		this.searchDirectories = searchDirectories;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in, String sourcename, List<ScriptSource> searchDirectories) {
    this(new java.io.InputStreamReader(in), sourcename, searchDirectories);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return new OperatorToken(getLine(),OperatorTypes.ADDRESS);
          }
        case 104: break;
        case 79: 
          { return new UnitToken(getLine());
          }
        case 105: break;
        case 73: 
          { return new SetToken(getLine());
          }
        case 106: break;
        case 39: 
          { return new GroupingExceptionToken(getLine(),
				GroupingException.Type.MISMATCHED_BRACKETS);
          }
        case 107: break;
        case 23: 
          { return new EndBracketToken(getLine());
          }
        case 108: break;
        case 11: 
          { return new EndParenToken(getLine());
          }
        case 109: break;
        case 41: 
          { return new BinaryToken(getLine(),(yytext()));
          }
        case 110: break;
        case 34: 
          { literal.setLength(0); yybegin(INCLUDE_DBL_QUOTE);
          }
        case 111: break;
        case 83: 
          { return new TypeToken(getLine());
          }
        case 112: break;
        case 89: 
          { return new UntilToken(getLine());
          }
        case 113: break;
        case 102: 
          { return new InitializationToken(getLine());
          }
        case 114: break;
        case 36: 
          { try {
    		addInclude(yytext());
    	}catch( FileNotFoundException e) {
    		GroupingException t = new GroupingException(getLine(),
    		        GroupingException.Type.IO_EXCEPTION);
			t.setCaused(e);
			return new GroupingExceptionToken(t);
    	}
    	yybegin(END_INCLUDE);
          }
        case 115: break;
        case 2: 
          { return new GroupingExceptionToken(new StrayCharacterException(getLine(),yytext().charAt(0)));
          }
        case 116: break;
        case 49: 
          { return new IfToken(getLine());
          }
        case 117: break;
        case 71: 
          { return new OperatorToken(getLine(),OperatorTypes.AND);
          }
        case 118: break;
        case 85: 
          { return new BooleanToken(getLine(),false);
          }
        case 119: break;
        case 32: 
          { return new GroupingExceptionToken(getLine(),
                GroupingException.Type.MISSING_INCLUDE);
          }
        case 120: break;
        case 61: 
          { return new PlusAssignToken(getLine());
          }
        case 121: break;
        case 87: 
          { return new BreakToken(getLine());
          }
        case 122: break;
        case 27: 
          { yypushback(1);
			yybegin(YYINITIAL); 
			if(literal.length()==1) {
			    LineInfo lineInfo = getLine();
                lineInfo.setColumn(lineInfo.getColumn() - 3);
				return new CharacterToken(lineInfo,literal.toString().charAt(0));
			} else {
			    LineInfo lineInfo = getLine();
                lineInfo.setColumn(lineInfo.getColumn() - literal.length() - 2);  //-2 by two quote
                return new StringToken(lineInfo, literal.toString());
			}
          }
        case 123: break;
        case 100: 
          { return new ProcedureToken(getLine());
          }
        case 124: break;
        case 8: 
          { return new ParenthesizedToken(getLine());
          }
        case 125: break;
        case 24: 
          { literal.setLength(0);
		yybegin(STRING);
          }
        case 126: break;
        case 69: 
          { return new OperatorToken(getLine(),OperatorTypes.NOT);
          }
        case 127: break;
        case 92: 
          { return new DowntoToken(getLine());
          }
        case 128: break;
        case 59: 
          { return new OperatorToken(getLine(),OperatorTypes.SHIFTRIGHT);
          }
        case 129: break;
        case 42: 
          { LineInfo lineInfo = getLine();
         String text = yytext();
         lineInfo.setColumn(lineInfo.getColumn() - text.length() - 1);
         return new CharacterToken(lineInfo, text);
          }
        case 130: break;
        case 56: 
          { return new OperatorToken(getLine(),OperatorTypes.NOTEQUAL);
          }
        case 131: break;
        case 20: 
          { return new CommaToken(getLine());
          }
        case 132: break;
        case 21: 
          { return new SemicolonToken(getLine());
          }
        case 133: break;
        case 67: 
          { return new ForToken(getLine());
          }
        case 134: break;
        case 90: 
          { return new ArrayToken(getLine());
          }
        case 135: break;
        case 99: 
          { return new InterfaceToken(getLine());
          }
        case 136: break;
        case 18: 
          { return new OperatorToken(getLine(),OperatorTypes.PLUS);
          }
        case 137: break;
        case 62: 
          { return new AssignmentToken(getLine());
          }
        case 138: break;
        case 26: 
          { yybegin(STRINGDONE);
          }
        case 139: break;
        case 13: 
          { return new OperatorToken(getLine(),OperatorTypes.LESSTHAN);
          }
        case 140: break;
        case 3: 
          { return new IntegerToken(getLine(), (yytext()));
          }
        case 141: break;
        case 101: 
          { return new FinalizationToken(getLine());
          }
        case 142: break;
        case 72: 
          { return new OperatorToken(getLine(),OperatorTypes.XOR);
          }
        case 143: break;
        case 33: 
          { literal.setLength(0); yybegin(INCLUDE_SNGL_QUOTE);
          }
        case 144: break;
        case 10: 
          { return new CommentToken(getLine(), yytext());
          }
        case 145: break;
        case 7: 
          { return new PeriodToken(getLine());
          }
        case 146: break;
        case 4: 
          { return new WordToken(getLine(),yytext());
          }
        case 147: break;
        case 14: 
          { return new OperatorToken(getLine(),OperatorTypes.GREATERTHAN);
          }
        case 148: break;
        case 66: 
          { return new EndToken(getLine());
          }
        case 149: break;
        case 57: 
          { return new OperatorToken(getLine(),OperatorTypes.LESSEQ);
          }
        case 150: break;
        case 35: 
          { return new GroupingExceptionToken(getLine(),
	        GroupingException.Type.IO_EXCEPTION);
          }
        case 151: break;
        case 98: 
          { return new ContinueToken(getLine());
          }
        case 152: break;
        case 81: 
          { return new BooleanToken(getLine(),true);
          }
        case 153: break;
        case 103: 
          { return new ImplementationToken(getLine());
          }
        case 154: break;
        case 44: 
          { return new DotDotToken(getLine());
          }
        case 155: break;
        case 97: 
          { return new FunctionToken(getLine());
          }
        case 156: break;
        case 1: 
          { literal.append(yytext());
          }
        case 157: break;
        case 68: 
          { return new CompileDirectiveToken(getLine(), yytext());
          }
        case 158: break;
        case 25: 
          { return new GroupingExceptionToken(getLine(), GroupingException.Type.NEWLINE_IN_QUOTES);
          }
        case 159: break;
        case 78: 
          { return new CaseToken(getLine());
          }
        case 160: break;
        case 82: 
          { return new ThenToken(getLine());
          }
        case 161: break;
        case 50: 
          { return new OperatorToken(getLine(),OperatorTypes.IN);
          }
        case 162: break;
        case 88: 
          { return new ConstToken(getLine());
          }
        case 163: break;
        case 53: 
          { return new OperatorToken(getLine(),OperatorTypes.OR);
          }
        case 164: break;
        case 77: 
          { yybegin(INCLUDE);
          }
        case 165: break;
        case 96: 
          { return new ProgramToken(getLine());
          }
        case 166: break;
        case 6: 
          { return new OperatorToken(getLine(),OperatorTypes.MINUS);
          }
        case 167: break;
        case 65: 
          { return new DoubleToken(getLine(),(yytext()));
          }
        case 168: break;
        case 48: 
          { return new DivAssignToken(getLine());
          }
        case 169: break;
        case 29: 
          { return new GroupingExceptionToken(getLine(), GroupingException.Type.INCOMPLETE_CHAR);
          }
        case 170: break;
        case 9: 
          { return new OperatorToken(getLine(),OperatorTypes.MULTIPLY);
          }
        case 171: break;
        case 52: 
          { return new OfToken(getLine());
          }
        case 172: break;
        case 47: 
          { return new MultiplyAssignToken(getLine());
          }
        case 173: break;
        case 28: 
          { yybegin(STRING);
          }
        case 174: break;
        case 60: 
          { return new OperatorToken(getLine(),OperatorTypes.GREATEREQ);
          }
        case 175: break;
        case 74: 
          { return new VarToken(getLine());
          }
        case 176: break;
        case 22: 
          { return new BracketedToken(getLine());
          }
        case 177: break;
        case 12: 
          { return new OperatorToken(getLine(),OperatorTypes.DIVIDE);
          }
        case 178: break;
        case 38: 
          { try {
    		addInclude(yytext());
    	}catch( FileNotFoundException e) {
    		GroupingException t = new GroupingException(getLine(),
    		    GroupingException.Type.IO_EXCEPTION);
			t.setCaused(e);
			return new GroupingExceptionToken(t);
    	}
    	yybegin(END_INCLUDE);
          }
        case 179: break;
        case 54: 
          { return new ToToken(getLine());
          }
        case 180: break;
        case 46: 
          { return new OctalToken(getLine(),(yytext()));
          }
        case 181: break;
        case 95: 
          { return new ForwardToken(getLine());
          }
        case 182: break;
        case 43: 
          { return new MinusAssignToken(getLine());
          }
        case 183: break;
        case 86: 
          { return new BeginEndToken(getLine());
          }
        case 184: break;
        case 45: 
          { return new HexToken(getLine(),(yytext()));
          }
        case 185: break;
        case 51: 
          { return new DoToken(getLine());
          }
        case 186: break;
        case 19: 
          { return new ColonToken(getLine());
          }
        case 187: break;
        case 64: 
          { literal.append('\"');
          }
        case 188: break;
        case 84: 
          { return new WithToken(getLine());
          }
        case 189: break;
        case 76: 
          { return new ElseToken(getLine());
          }
        case 190: break;
        case 30: 
          { literal.append((char)Integer.parseInt(yytext())); yybegin(STRINGDONE);
          }
        case 191: break;
        case 80: 
          { return new UsesToken(getLine());
          }
        case 192: break;
        case 93: 
          { return new RecordToken(getLine());
          }
        case 193: break;
        case 91: 
          { return new WhileToken(getLine());
          }
        case 194: break;
        case 17: 
          { return new OperatorToken(getLine(),OperatorTypes.DEREF);
          }
        case 195: break;
        case 70: 
          { return new OperatorToken(getLine(),OperatorTypes.DIV);
          }
        case 196: break;
        case 15: 
          { return new OperatorToken(getLine(),OperatorTypes.EQUALS);
          }
        case 197: break;
        case 55: 
          { return new OperatorToken(getLine(),OperatorTypes.SHIFTLEFT);
          }
        case 198: break;
        case 94: 
          { return new RepeatToken(getLine());
          }
        case 199: break;
        case 75: 
          { return new OperatorToken(getLine(),OperatorTypes.MOD);
          }
        case 200: break;
        case 58: 
          { return new OperatorToken(getLine(),OperatorTypes.DIFFERENT);
          }
        case 201: break;
        case 40: 
          { yybegin(YYINITIAL); commitInclude();
          }
        case 202: break;
        case 31: 
          { try {
    		addInclude(yytext());
    	}catch( FileNotFoundException e) {
    		GroupingException t = new GroupingException(getLine(),
    		     GroupingException.Type.IO_EXCEPTION);
			t.setCaused(e);
			return new GroupingExceptionToken(t);
    	}
    	yybegin(END_INCLUDE);
          }
        case 203: break;
        case 63: 
          { literal.append('\'');
          }
        case 204: break;
        case 37: 
          { return new GroupingExceptionToken(getLine(),
	        GroupingException.Type.NEWLINE_IN_QUOTES);
          }
        case 205: break;
        case 5: 
          { 
          }
        case 206: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	if (!yymoreStreams()) {
		return new EOFToken(getLine());
	}
	sourcenames.pop();
	yypopStream();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
